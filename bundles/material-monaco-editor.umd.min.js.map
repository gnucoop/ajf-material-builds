{"version":3,"file":"material-monaco-editor.umd.min.js","sources":["../../src/material/monaco-editor/auto-complete-item-model.ts","../../src/material/monaco-editor/editor-language-model.ts","../../src/material/monaco-editor/autocomplete-singleton-model.ts","../../src/material/monaco-editor/editor-options-model.ts","../../src/material/monaco-editor/monaco-editor.ts","../../src/material/monaco-editor/monaco-editor-module.ts"],"sourcesContent":["/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\n/**\n * Representation of AutoCompleteItem\n */\nexport class AutoCompleteItem {\n    label: string;\n    kind: number;\n    documentation: string;\n    insertText: string;\n\n    constructor() {\n\n    }\n\n    setLabel(label: string): AutoCompleteItem {\n        this.label = label;\n        return this;\n    }\n\n    setKind(kind: number): AutoCompleteItem {\n        this.kind = kind;\n        return this;\n    }\n\n    setDocumentation(documentation: string): AutoCompleteItem {\n        this.documentation = documentation;\n        return this;\n    }\n\n    setInsertText(insertText: string): AutoCompleteItem {\n        this.insertText = insertText;\n        return this;\n    }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\n/**\n * List of dev language avalaible in Monaco Editor\n */\nexport class IEditorLanguage {\n    static readonly BAT = 'bat';\n    static readonly C = 'c';\n    static readonly CPP = 'cpp';\n    static readonly CSHARP = 'csharp';\n    static readonly CSS = 'css';\n    static readonly DOCKERFILE = 'dockerfile';\n    static readonly FSHARP = 'fsharp';\n    static readonly GO = 'go';\n    static readonly HANDLEBARS = 'handlebars';\n    static readonly HTML = 'html';\n    static readonly INI = 'ini';\n    static readonly JADE = 'jade';\n    static readonly JAVASCRIPT = 'javascript';\n    static readonly JSON = 'json';\n    static readonly LESS = 'less';\n    static readonly LUA = 'lua';\n    static readonly MARKDOWN = 'markdown';\n    static readonly OBJECTIVEC = 'objective-c';\n    static readonly PHP = 'php';\n    static readonly PLAINTEXT = 'plaintext';\n    static readonly POSTIATS = 'postiats';\n    static readonly POWERSHELL = 'powershell';\n    static readonly PYTHON = 'python';\n    static readonly R = 'r';\n    static readonly RAZOR = 'razor';\n    static readonly RUBY = 'ruby';\n    static readonly SCSS = 'scss';\n    static readonly SQL = 'sql';\n    static readonly SWIFT = 'swift';\n    static readonly TYPESCRIPT = 'typescript';\n    static readonly VB = 'vb';\n    static readonly XML = 'xml';\n    static readonly YAML = 'yaml';\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {AutoCompleteItem} from './auto-complete-item-model';\nimport {IEditorLanguage} from './editor-language-model';\n\ndeclare const monaco: any;\n\n/**\n * Manage the autoCompletion for all instances of the editors\n */\nexport class AutoCompleteSingleton {\n    /**\n     * We use a singleton, because this class can be call from all the Monaco Editor Components\n     */\n    static getInstance() {\n        if (!AutoCompleteSingleton._instance) {\n            AutoCompleteSingleton._instance = new AutoCompleteSingleton();\n        }\n        return AutoCompleteSingleton._instance;\n    }\n\n    get autoCompleteValues(): {[p: string]: AutoCompleteItem[]} {\n        return this._autoCompleteValues;\n    }\n\n    private static _instance: AutoCompleteSingleton | null = null;\n    private _autoCompleteValues: { [key: string]: AutoCompleteItem[]; } = {};\n\n    private constructor() {\n\n    }\n\n    /**\n     * Init autoComplete for language passed in param if is not already done.\n     * @param language\n     */\n    initAutoComplete(language: IEditorLanguage) {\n        if (this._autoCompleteValues[language.toString()]) {\n            return;\n        }\n\n        this._autoCompleteValues[language.toString()] = [];\n\n        // This event is fired when the user press Ctrl + Space, to show Intelissense (Autocomplete)\n        monaco.languages.registerCompletionItemProvider(language, {\n            provideCompletionItems: function (model: any) {\n                // Get new autoComplete list for the current content\n                AutoCompleteSingleton.getInstance()\n                  .parseAutoCompleteValues(language, model.getValue());\n                return AutoCompleteSingleton.getInstance().autoCompleteValues[language.toString()];\n            },\n        });\n    }\n\n    /**\n     * Parse the content passed in param for the language passed in param\n     * @param language\n     * @param content\n     */\n    parseAutoCompleteValues(language: IEditorLanguage, content: string): AutoCompleteItem[] {\n        switch (language) {\n            case IEditorLanguage.XML:\n                return this._parseXmlAutoComplete(content);\n            case IEditorLanguage.JSON:\n                return this._parseJsonAutoComplete(content);\n            default:\n                return [];\n        }\n    }\n\n    /**\n     * Parse the XML content and add all tags in AutoComplete for XML Language\n     * @param content\n     */\n    private _parseXmlAutoComplete(content: string): AutoCompleteItem[] {\n        let tempList: AutoCompleteItem [] = [];\n        let parser = new DOMParser();\n        let tags = parser.parseFromString(content, 'text/xml').getElementsByTagName('*');\n\n        for (let i = 0; i < tags.length; i++) {\n            // Add TAG only if it not already existing in autoComplete list and in tempList\n            if (\n              !this._autoCompleteValues[IEditorLanguage.XML]\n                .find(obj => obj.label === tags[i].tagName)\n              && !tempList.find(obj => obj.label === tags[i].tagName)\n            ) {\n\n                // Create autoComplete object\n                let obj = new AutoCompleteItem()\n                    .setLabel(tags[i].tagName)\n                    .setKind(monaco.languages.CompletionItemKind.Function)\n                    .setDocumentation('')\n                    .setInsertText(`<${tags[i].tagName}><${tags[i].tagName}>`);\n\n                tempList.push(obj);\n            }\n        }\n\n        // Add tempList list in the _autoCompleteValues, to maintain a list updated\n        if (tempList.length > 0) {\n            this._autoCompleteValues[IEditorLanguage.XML.toString()] =\n              this._autoCompleteValues[IEditorLanguage.XML.toString()].concat(tempList);\n        }\n\n        return tempList;\n    }\n\n    private _parseJsonAutoComplete(content: string): AutoCompleteItem[] {\n        /* tslint:disable-next-line */\n        const regex = /(?:\\'|\\')([^']*)(?:\\'|\\')(?=:)(?:\\:\\s*)(?:\\'|\\')?(true|false|[0-9a-zA-Z\\+\\-\\,\\.\\$]*)/g;\n        let tempList: AutoCompleteItem [] = [];\n        let m: any;\n\n        while ((m = regex.exec(content)) !== null) {\n            // This is necessary to avoid infinite loops with zero-width matches\n            if (m.index === regex.lastIndex) {\n                regex.lastIndex++;\n            }\n\n            // Add Element only if it not already existing in autoComplete list and in tempList\n            if (\n              m[1] && !this._autoCompleteValues[IEditorLanguage.JSON]\n                .find(obj => obj.label === m[1])\n                && !tempList.find(obj => obj.label === m[1])\n            ) {\n\n                let obj = new AutoCompleteItem()\n                    .setLabel(m[1])\n                    .setKind(monaco.languages.CompletionItemKind.Value)\n                    .setDocumentation('')\n                    .setInsertText(`'${m[1]}':`);\n\n                tempList.push(obj);\n            }\n        }\n\n        // Add tempList list in the _autoCompleteValues, to maintain a list updated\n        if (tempList.length > 0) {\n            this._autoCompleteValues[IEditorLanguage.JSON.toString()] =\n              this._autoCompleteValues[IEditorLanguage.JSON.toString()].concat(tempList);\n        }\n\n        return tempList;\n    }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {IEditorLanguage} from './editor-language-model';\nimport {IEditorScrollbarOptions} from './editor-scrollbar-options';\nimport {IEditorTheme} from './editor-theme';\n/**\n * Configuration options for the editor.\n */\nexport class IEditorOptions {\n    /**\n     * Enable experimental screen reader support.\n     * Defaults to `true`.\n     */\n    experimentalScreenReader?: boolean;\n    /**\n     * The aria label for the editor's textarea (when it is focused).\n     */\n    ariaLabel?: string;\n    /**\n     * Render vertical lines at the specified columns.\n     * Defaults to empty array.\n     */\n    rulers?: number[];\n    /**\n     * A string containing the word separators used when doing word navigation.\n     * Defaults to ``~!@#$%^&*()-=+[{]}\\\\|;:\\'',.`<``>`/?\n     */\n    wordSeparators?: string;\n    /**\n     * Enable Linux primary clipboard.\n     * Defaults to true.\n     */\n    selectionClipboard?: boolean;\n    /**\n     * Control the rendering of line numbers.\n     * If it is a function, it will be invoked when rendering a line number\n     * and the return value will be rendered.\n     * Otherwise, if it is a truey, line numbers will be rendered normally\n     * (equivalent of using an identity function).\n     * Otherwise, line numbers will not be rendered.\n     * Defaults to true.\n     */\n    lineNumbers?: boolean;\n    /**\n     * Should the corresponding line be selected when clicking on the line number?\n     * Defaults to true.\n     */\n    selectOnLineNumbers?: boolean;\n    /**\n     * Control the width of line numbers, by reserving horizontal space\n     * for rendering at least an amount of digits.\n     * Defaults to 5.\n     */\n    lineNumbersMinChars?: number;\n    /**\n     * Enable the rendering of the glyph margin.\n     * Defaults to false.\n     */\n    glyphMargin?: boolean;\n    /**\n     * The width reserved for line decorations (in px).\n     * Line decorations are placed between line numbers and the editor content.\n     * Defaults to 10.\n     */\n    lineDecorationsWidth?: number;\n    /**\n     * When revealing the cursor, a virtual padding (px) is added to the cursor,\n     * turning it into a rectangle.\n     * This virtual padding ensures that the cursor gets revealed before\n     * hitting the edge of the viewport.\n     * Defaults to 30 (px).\n     */\n    revealHorizontalRightPadding?: number;\n    /**\n     * Render the editor selection with rounded borders.\n     * Defaults to true.\n     */\n    roundedSelection?: boolean;\n    /**\n     * Theme to be used for rendering. Consists of two parts, the UI theme and the syntax theme,\n     * separated by a space.\n     * The current available UI themes are: 'vs' (default), 'vs-dark', 'hc-black'\n     * The syntax themes are contributed. The default is 'default-theme'\n     */\n    theme?: IEditorTheme;\n    /**\n     * Should the editor be read only.\n     * Defaults to false.\n     */\n    readOnly?: boolean;\n    /**\n     * Control the behavior and rendering of the scrollbars.\n     */\n    scrollbar?: IEditorScrollbarOptions;\n    /**\n     * The number of vertical lanes the overview ruler should render.\n     * Defaults to 2.\n     */\n    overviewRulerLanes?: number;\n    /**\n     * Control the cursor animation style, possible values are\n     * 'blink', 'smooth', 'phase', 'expand' and 'solid'.\n     * Defaults to 'blink'.\n     */\n    cursorBlinking?: string;\n    /**\n     * Zoom the font in the editor when using the mouse wheel in combination with holding Ctrl.\n     * Defaults to false.\n     */\n    mouseWheelZoom?: boolean;\n    /**\n     * Control the cursor style, either 'block' or 'line'.\n     * Defaults to 'line'.\n     */\n    cursorStyle?: string;\n    /**\n     * Enable font ligatures.\n     * Defaults to false.\n     */\n    fontLigatures?: boolean;\n    /**\n     * Disable the use of `translate3d`.\n     * Defaults to false.\n     */\n    disableTranslate3d?: boolean;\n    /**\n     * Should the cursor be hidden in the overview ruler.\n     * Defaults to false.\n     */\n    hideCursorInOverviewRuler?: boolean;\n    /**\n     * Enable that scrolling can go one screen size after the last line.\n     * Defaults to true.\n     */\n    scrollBeyondLastLine?: boolean;\n    /**\n     * Enable that the editor will install an interval to check\n     * if its container dom node size has changed.\n     * Enabling this might have a severe performance impact.\n     * Defaults to false.\n     */\n    automaticLayout?: boolean;\n    /**\n     * Control the wrapping strategy of the editor.\n     * Using -1 means no wrapping whatsoever.\n     * Using 0 means viewport width wrapping (ajusts with the resizing of the editor).\n     * Using a positive number means wrapping after a fixed number of characters.\n     * Defaults to 300.\n     */\n    wrappingColumn?: number;\n    /**\n     * Control the alternate style of viewport wrapping.\n     * When set to true viewport wrapping is used only when the window width\n     * is less than the number of columns specified in the wrappingColumn property.\n     * Has no effect if wrappingColumn is not a positive number.\n     * Defaults to false.\n     */\n    wordWrap?: boolean;\n    /**\n     * Control indentation of wrapped lines. Can be: 'none', 'same' or 'indent'.\n     * Defaults to 'none'.\n     */\n    wrappingIndent?: string;\n    /**\n     * Configure word wrapping characters. A break will be introduced before these characters.\n     * Defaults to '{([+'.\n     */\n    wordWrapBreakBeforeCharacters?: string;\n    /**\n     * Configure word wrapping characters. A break will be introduced after these characters.\n     * Defaults to ' \\t})]?|&,;'.\n     */\n    wordWrapBreakAfterCharacters?: string;\n    /**\n     * Configure word wrapping characters. A break will be introduced after these characters\n     * only if no `wordWrapBreakBeforeCharacters` or `wordWrapBreakAfterCharacters` were found.\n     * Defaults to '.'.\n     */\n    wordWrapBreakObtrusiveCharacters?: string;\n    /**\n     * Performance guard: Stop rendering a line after x characters.\n     * Defaults to 10000 if wrappingColumn is -1. Defaults to -1 if wrappingColumn is `>`= 0.\n     * Use -1 to never stop rendering\n     */\n    stopRenderingLineAfter?: number;\n    /**\n     * Enable hover.\n     * Defaults to true.\n     */\n    hover?: boolean;\n    /**\n     * Enable custom contextmenu.\n     * Defaults to true.\n     */\n    contextmenu?: boolean;\n    /**\n     * A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.\n     * Defaults to 1.\n     */\n    mouseWheelScrollSensitivity?: number;\n    /**\n     * Enable quick suggestions (shadow suggestions)\n     * Defaults to true.\n     */\n    quickSuggestions?: boolean;\n    /**\n     * Quick suggestions show delay (in ms)\n     * Defaults to 500 (ms)\n     */\n    quickSuggestionsDelay?: number;\n    /**\n     * Enables parameter hints\n     */\n    parameterHints?: boolean;\n    /**\n     * Render icons in suggestions box.\n     * Defaults to true.\n     */\n    iconsInSuggestions?: boolean;\n    /**\n     * Enable auto closing brackets.\n     * Defaults to true.\n     */\n    autoClosingBrackets?: boolean;\n    /**\n     * Enable format on type.\n     * Defaults to false.\n     */\n    formatOnType?: boolean;\n    /**\n     * Enable the suggestion box to pop-up on trigger characters.\n     * Defaults to true.\n     */\n    suggestOnTriggerCharacters?: boolean;\n    /**\n     * Accept suggestions on ENTER.\n     * Defaults to true.\n     */\n    acceptSuggestionOnEnter?: boolean;\n    /**\n     * Enable snippet suggestions. Default to 'true'.\n     */\n    snippetSuggestions?: 'top' | 'bottom' | 'inline' | 'none';\n    /**\n     * Enable tab completion. Defaults to 'false'\n     */\n    tabCompletion?: boolean;\n    /**\n     * Enable word based suggestions. Defaults to 'true'\n     */\n    wordBasedSuggestions?: boolean;\n    /**\n     * Enable selection highlight.\n     * Defaults to true.\n     */\n    selectionHighlight?: boolean;\n    /**\n     * Show code lens\n     * Defaults to true.\n     */\n    codeLens?: boolean;\n    /**\n     * Enable code folding\n     * Defaults to true.\n     */\n    folding?: boolean;\n    /**\n     * Enable rendering of whitespace.\n     * Defaults to none.\n     */\n    renderWhitespace?: 'none' | 'boundary' | 'all';\n    /**\n     * Enable rendering of control characters.\n     * Defaults to false.\n     */\n    renderControlCharacters?: boolean;\n    /**\n     * Enable rendering of indent guides.\n     * Defaults to false.\n     */\n    renderIndentGuides?: boolean;\n    /**\n     * Enable rendering of current line highlight.\n     * Defaults to true.\n     */\n    renderLineHighlight?: boolean;\n    /**\n     * Inserting and deleting whitespace follows tab stops.\n     */\n    useTabStops?: boolean;\n    /**\n     * The font family\n     */\n    fontFamily?: string;\n    /**\n     * The font weight\n     */\n    fontWeight?: 'normal' | 'bold' | 'bolder' | 'lighter' | 'initial' | 'inherit' |\n      '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';\n    /**\n     * The font size\n     */\n    fontSize?: number;\n    /**\n     * The line height\n     */\n    lineHeight?: number;\n\n    /**\n     * Content to show\n     */\n    value: string;\n    /**\n     * Language of content to show\n     */\n    language: IEditorLanguage;\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {\n  AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input,\n  OnChanges, OnDestroy, Output, SimpleChange, ViewChild, ViewEncapsulation\n} from '@angular/core';\nimport {AutoCompleteSingleton} from './autocomplete-singleton-model';\nimport {IEditorLanguage} from './editor-language-model';\nimport {IEditorOptions} from './editor-options-model';\nimport {IEditorScrollbarOptions} from './editor-scrollbar-options';\nimport {IEditorTheme} from './editor-theme';\n\ndeclare const monaco: any;\n\n\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'ajf-monaco-editor',\n  styleUrls: ['monaco-editor.css'],\n  templateUrl: 'monaco-editor.html',\n  host: {\n    '(window:resize)': 'onResize($event)'\n  }\n})\nexport class AjfMonacoEditor implements OnDestroy, AfterViewInit, OnChanges {\n  @Input() experimentalScreenReader?: boolean;\n  @Input() ariaLabel?: string;\n  @Input() rulers?: number[];\n  @Input() wordSeparators?: string;\n  @Input() selectionClipboard?: boolean;\n  @Input() lineNumbers?: boolean;\n  @Input() selectOnLineNumbers?: boolean;\n  @Input() lineNumbersMinChars?: number;\n  @Input() glyphMargin?: boolean;\n  @Input() lineDecorationsWidth?: number;\n  @Input() revealHorizontalRightPadding?: number;\n  @Input() roundedSelection?: boolean;\n  @Input() theme?: IEditorTheme;\n  @Input() readOnly?: boolean;\n  @Input() scrollbar?: IEditorScrollbarOptions;\n  @Input() overviewRulerLanes?: number;\n  @Input() cursorBlinking?: string;\n  @Input() mouseWheelZoom?: boolean;\n  @Input() cursorStyle?: string;\n  @Input() fontLigatures?: boolean;\n  @Input() disableTranslate3d?: boolean;\n  @Input() hideCursorInOverviewRuler?: boolean;\n  @Input() scrollBeyondLastLine?: boolean;\n  @Input() automaticLayout?: boolean;\n  @Input() wrappingColumn?: number;\n  @Input() wordWrap?: boolean;\n  @Input() wrappingIndent?: string;\n  @Input() wordWrapBreakBeforeCharacters?: string;\n  @Input() wordWrapBreakAfterCharacters?: string;\n  @Input() wordWrapBreakObtrusiveCharacters?: string;\n  @Input() stopRenderingLineAfter?: number;\n  @Input() hover?: boolean;\n  @Input() contextmenu?: boolean;\n  @Input() mouseWheelScrollSensitivity?: number;\n  @Input() quickSuggestions?: boolean;\n  @Input() quickSuggestionsDelay?: number;\n  @Input() parameterHints?: boolean;\n  @Input() iconsInSuggestions?: boolean;\n  @Input() autoClosingBrackets?: boolean;\n  @Input() formatOnType?: boolean;\n  @Input() suggestOnTriggerCharacters?: boolean;\n  @Input() acceptSuggestionOnEnter?: boolean;\n  @Input() snippetSuggestions?: 'top' | 'bottom' | 'inline' | 'none';\n  @Input() tabCompletion?: boolean;\n  @Input() wordBasedSuggestions?: boolean;\n  @Input() selectionHighlight?: boolean;\n  @Input() codeLens?: boolean;\n  @Input() folding?: boolean;\n  @Input() renderWhitespace?: 'none' | 'boundary' | 'all';\n  @Input() renderControlCharacters?: boolean;\n  @Input() renderIndentGuides?: boolean;\n  @Input() renderLineHighlight?: boolean;\n  @Input() useTabStops?: boolean;\n  @Input() fontFamily?: string;\n  @Input() fontWeight?: 'normal' | 'bold' | 'bolder' | 'lighter' | 'initial' | 'inherit'\n    | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';\n  @Input() fontSize?: number;\n  @Input() lineHeight?: number;\n\n  @Input() language: IEditorLanguage;\n\n  @Input() disableAutocomplete: boolean;\n  @Input() autoFormatOnLoad = true;\n  @Input() monacoLibPath = 'vs/loader.js';\n\n  @Input() set valueToCompare(v: string) {\n    if (v !== this._valueToCompare) {\n      this._valueToCompare = v;\n\n      if (this._valueToCompare === void 0 || !this._valueToCompare || !this._editor) {\n        if (this._editor && this._editor.getEditorType() !== 'vs.editor.ICodeEditor') {\n          this._initEditor();\n          return;\n        }\n\n        return;\n      }\n\n      if (!this._value) {\n        this._value = '';\n      }\n\n      if (this._editor.getEditorType() === 'vs.editor.ICodeEditor') {\n        this._initEditor();\n        return;\n      }\n    }\n  }\n\n    @Input() set value(v: string) {\n      if (v !== this._value) {\n        this._value = v;\n\n        if (this._value === void 0 || !this._editor) {\n          return;\n        }\n\n        if (this._editor.getEditorType() !== 'vs.editor.ICodeEditor') {\n          this._initEditor();\n          return;\n        }\n\n        this._editor.setValue(this._value);\n      }\n    }\n\n    @Output() valueChange = new EventEmitter();\n    @Output() valueToCompareChange = new EventEmitter();\n    @Output() init = new EventEmitter();\n\n    @ViewChild('editor', {static: true}) editorContent: ElementRef;\n\n    private _editor: any;\n    get editor(): any { return this._editor; }\n\n    private _value = '';\n    private _valueToCompare = '';\n\n    constructor() {\n    }\n\n    /**\n     * load Monaco lib\n     */\n    ngAfterViewInit() {\n        let onGotAmdLoader = () => {\n            // Load monaco\n            (<any>window).require(['vs/editor/editor.main'], () => {\n                this._initMonaco();\n            });\n        };\n\n        // Load AMD loader if necessary\n        if (!(<any>window).require) {\n            let loaderScript = document.createElement('script');\n            loaderScript.type = 'text/javascript';\n            loaderScript.src = this.monacoLibPath;\n            loaderScript.addEventListener('load', onGotAmdLoader);\n            document.body.appendChild(loaderScript);\n        } else {\n            onGotAmdLoader();\n        }\n    }\n\n    /**\n     * Upon destruction of the component we make sure to dispose both the editor and\n     * the extra libs that we might've loaded\n     */\n    ngOnDestroy() {\n        this.dispose();\n    }\n\n    ngOnChanges(_changes: {[propKey: string]: SimpleChange}) {\n        if (this._editor) {\n            this._editor.updateOptions(this._getOptions());\n        }\n    }\n\n    /**\n     * Destroy the monaco componenent\n     */\n    dispose() {\n        let myDiv: HTMLDivElement = this.editorContent.nativeElement;\n        if (this._editor) {\n            this._editor.dispose();\n            while (myDiv.hasChildNodes()) {\n              if (myDiv.firstChild != null) {\n                myDiv.removeChild(myDiv.firstChild);\n              }\n            }\n            this._editor = null;\n        }\n    }\n\n    /**\n     * Triggered when windows is resized\n     * @param event\n     */\n    onResize(_event: any) {\n        // Manually set monaco size because MonacoEditor doesn't work with Flexbox css\n        let myDiv: HTMLDivElement = this.editorContent.nativeElement;\n        if (myDiv == null || myDiv.parentElement == null) { return; }\n        myDiv.setAttribute('style', `height: ${myDiv.parentElement.offsetHeight}px; width:100%;`);\n    }\n\n    /**\n     * Init editor\n     * Is called once monaco library is available\n     */\n    private _initMonaco() {\n        this._initEditor();\n        this.init.emit();\n    }\n\n    private _initEditor() {\n        let myDiv: HTMLDivElement = this.editorContent.nativeElement;\n        let options = this._getOptions();\n        this.dispose();\n\n        if (!this._valueToCompare) {\n            this._editor = this._initSimpleEditor(myDiv, options);\n        } else {\n            this._editor = this._initDiffEditor(myDiv, options);\n        }\n\n        // Manually set monaco size because MonacoEditor doesn't work with Flexbox css\n        if (myDiv != null && myDiv.parentElement != null) {\n          myDiv.setAttribute('style', `height: ${myDiv.parentElement.offsetHeight}px; width:100%;`);\n        }\n\n        // Init Autocomplete if not disabled\n        if (!this.disableAutocomplete) {\n            AutoCompleteSingleton.getInstance().initAutoComplete(this.language);\n        }\n\n        // When content is loaded, scrollChange is trigerred,\n        // We can only force auto format at this moment, because editor\n        // doesn't have onReady event ...\n        //  this._editor.onDidScrollChange(() => {\n        //     if (this.autoFormatOnLoad && !this._isCodeFormatted) {\n        //         this._editor.getAction('editor.action.format').run();\n        //         this._isCodeFormatted = true;\n        //     }\n        // });\n\n        // Trigger on change event for simple editor\n        this._getOriginalModel().onDidChangeContent((_e: any) => {\n            let newVal: string = this._getOriginalModel().getValue();\n            if (this._value !== newVal) {\n                this._updateValue(newVal);\n            }\n        });\n\n        // Trigger on change event for diff editor\n        if (this._getModifiedModel()) {\n            this._getModifiedModel().onDidChangeContent((_e: any) => {\n                let newVal: string = this._getModifiedModel().getValue();\n                if (this._valueToCompare !== newVal) {\n                    this._updateValueToCompare(newVal);\n                }\n            });\n        }\n    }\n\n    /**\n     * Create a simple editor text\n     * @param div\n     * @param options\n     */\n    private _initSimpleEditor(div: HTMLDivElement, options: any) {\n        return monaco.editor.create(div, options);\n    }\n\n    /**\n     * Create a diff editor to compare two string (_value and _valueToCompare)\n     * @param div\n     */\n    private _initDiffEditor(div: HTMLDivElement, options: any) {\n        let originalModel = monaco.editor.createModel(this._value, this.language);\n        let modifiedModel = monaco.editor.createModel(this._valueToCompare, this.language);\n\n        let diffEditor = monaco.editor.createDiffEditor(div, options);\n        diffEditor.setModel({\n            modified: modifiedModel,\n            original: originalModel,\n        });\n\n        return diffEditor;\n    }\n\n    private _getOptions(): IEditorOptions {\n        let options: IEditorOptions = new IEditorOptions();\n        options.experimentalScreenReader = this.experimentalScreenReader;\n        options.ariaLabel = this.ariaLabel;\n        options.rulers = this.rulers;\n        options.wordSeparators = this.wordSeparators;\n        options.selectionClipboard = this.selectionClipboard;\n        options.lineNumbers = this.lineNumbers;\n        options.selectOnLineNumbers = this.selectOnLineNumbers;\n        options.lineNumbersMinChars = this.lineNumbersMinChars;\n        options.glyphMargin = this.glyphMargin;\n        options.lineDecorationsWidth = this.lineDecorationsWidth;\n        options.revealHorizontalRightPadding = this.revealHorizontalRightPadding;\n        options.roundedSelection = this.roundedSelection;\n        options.theme = this.theme;\n        options.readOnly = this.readOnly;\n        options.scrollbar = this.scrollbar;\n        options.overviewRulerLanes = this.overviewRulerLanes;\n        options.cursorBlinking = this.cursorBlinking;\n        options.mouseWheelZoom = this.mouseWheelZoom;\n        options.cursorStyle = this.cursorStyle;\n        options.mouseWheelZoom = this.mouseWheelZoom;\n        options.fontLigatures = this.fontLigatures;\n        options.disableTranslate3d = this.disableTranslate3d;\n        options.hideCursorInOverviewRuler = this.hideCursorInOverviewRuler;\n        options.scrollBeyondLastLine = this.scrollBeyondLastLine;\n        options.automaticLayout = this.automaticLayout;\n        options.wrappingColumn = this.wrappingColumn;\n        options.wordWrap = this.wordWrap;\n        options.wrappingIndent = this.wrappingIndent;\n        options.wordWrapBreakBeforeCharacters = this.wordWrapBreakBeforeCharacters;\n        options.wordWrapBreakAfterCharacters = this.wordWrapBreakAfterCharacters;\n        options.wordWrapBreakObtrusiveCharacters = this.wordWrapBreakObtrusiveCharacters;\n        options.stopRenderingLineAfter = this.stopRenderingLineAfter;\n        options.hover = this.hover;\n        options.contextmenu = this.contextmenu;\n        options.mouseWheelScrollSensitivity = this.mouseWheelScrollSensitivity;\n        options.quickSuggestions = this.quickSuggestions;\n        options.quickSuggestionsDelay = this.quickSuggestionsDelay;\n        options.parameterHints = this.parameterHints;\n        options.iconsInSuggestions = this.iconsInSuggestions;\n        options.autoClosingBrackets = this.autoClosingBrackets;\n        options.formatOnType = this.formatOnType;\n        options.suggestOnTriggerCharacters = this.suggestOnTriggerCharacters;\n        options.acceptSuggestionOnEnter = this.acceptSuggestionOnEnter;\n        options.snippetSuggestions = this.snippetSuggestions;\n        options.tabCompletion = this.tabCompletion;\n        options.wordBasedSuggestions = this.wordBasedSuggestions;\n        options.selectionHighlight = this.selectionHighlight;\n        options.codeLens = this.codeLens;\n        options.folding = this.folding;\n        options.renderWhitespace = this.renderWhitespace;\n        options.renderControlCharacters = this.renderControlCharacters;\n        options.renderIndentGuides = this.renderIndentGuides;\n        options.renderLineHighlight = this.renderLineHighlight;\n        options.useTabStops = this.useTabStops;\n        options.fontFamily = this.fontFamily;\n        options.fontWeight = this.fontWeight;\n        options.fontSize = this.fontSize;\n        options.lineHeight = this.lineHeight;\n        options.value = this._value;\n        options.language = this.language;\n\n        Object.keys(options)\n          .forEach((key) => {\n            if ((<any>options)[key] === undefined) {\n              delete (<any>options)[key]; // Remove all undefined properties\n            }\n          });\n        return options;\n    }\n\n    /**\n     * UpdateValue\n     *\n     * @param value\n     */\n    private _updateValue(value: string) {\n        this.value = value;\n        this._value = value;\n        this.valueChange.emit(value);\n    }\n\n    /**\n     * UpdateValue\n     *\n     * @param value\n     */\n    private _updateValueToCompare(value: string) {\n        this.valueToCompare = value;\n        this._valueToCompare = value;\n        this.valueToCompareChange.emit(value);\n    }\n\n    private _getOriginalModel() {\n        if (this._editor) {\n            let model = this._editor.getModel();\n            return model.original ? model.original : model;\n        }\n    }\n\n    private _getModifiedModel() {\n        if (this._editor) {\n            let model = this._editor.getModel();\n            return model.modified ? model.modified : null;\n        }\n    }\n}\n","/**\n * @license\n * Copyright (C) 2018 Gnucoop soc. coop.\n *\n * This file is part of the Advanced JSON forms (ajf).\n *\n * Advanced JSON forms (ajf) is free software: you can redistribute it and/or\n * modify it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero\n * General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Advanced JSON forms (ajf).\n * If not, see http://www.gnu.org/licenses/.\n *\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {AjfMonacoEditor} from './monaco-editor';\n\n@NgModule({\n  declarations: [\n    AjfMonacoEditor,\n  ],\n  exports: [\n    AjfMonacoEditor,\n  ]\n})\nexport class AjfMonacoEditorModule { }\n"],"names":["AutoCompleteItem","prototype","setLabel","label","this","setKind","kind","setDocumentation","documentation","setInsertText","insertText","IEditorLanguage","BAT","C","CPP","CSHARP","CSS","DOCKERFILE","FSHARP","GO","HANDLEBARS","HTML","INI","JADE","JAVASCRIPT","JSON","LESS","LUA","MARKDOWN","OBJECTIVEC","PHP","PLAINTEXT","POSTIATS","POWERSHELL","PYTHON","R","RAZOR","RUBY","SCSS","SQL","SWIFT","TYPESCRIPT","VB","XML","YAML","AutoCompleteSingleton","getInstance","_instance","Object","defineProperty","_autoCompleteValues","initAutoComplete","language","toString","monaco","languages","registerCompletionItemProvider","provideCompletionItems","model","parseAutoCompleteValues","getValue","autoCompleteValues","content","_parseXmlAutoComplete","_parseJsonAutoComplete","tempList","tags","DOMParser","parseFromString","getElementsByTagName","_loop_1","i","this_1","find","obj","tagName","CompletionItemKind","Function","push","length","concat","m","regex","exec","index","lastIndex","Value","AjfMonacoEditor","v","_valueToCompare","_editor","getEditorType","_initEditor","_value","setValue","ngAfterViewInit","onGotAmdLoader","require","_this","_initMonaco","loaderScript","document","createElement","type","src","monacoLibPath","addEventListener","body","appendChild","ngOnDestroy","dispose","ngOnChanges","_changes","updateOptions","_getOptions","myDiv","editorContent","nativeElement","hasChildNodes","firstChild","removeChild","onResize","_event","parentElement","setAttribute","offsetHeight","init","emit","options","_initDiffEditor","_initSimpleEditor","disableAutocomplete","_getOriginalModel","onDidChangeContent","_e","newVal","_updateValue","_getModifiedModel","_updateValueToCompare","div","editor","create","originalModel","createModel","modifiedModel","diffEditor","createDiffEditor","setModel","modified","original","IEditorOptions","experimentalScreenReader","ariaLabel","rulers","wordSeparators","selectionClipboard","lineNumbers","selectOnLineNumbers","lineNumbersMinChars","glyphMargin","lineDecorationsWidth","revealHorizontalRightPadding","roundedSelection","theme","readOnly","scrollbar","overviewRulerLanes","cursorBlinking","mouseWheelZoom","cursorStyle","fontLigatures","disableTranslate3d","hideCursorInOverviewRuler","scrollBeyondLastLine","automaticLayout","wrappingColumn","wordWrap","wrappingIndent","wordWrapBreakBeforeCharacters","wordWrapBreakAfterCharacters","wordWrapBreakObtrusiveCharacters","stopRenderingLineAfter","hover","contextmenu","mouseWheelScrollSensitivity","quickSuggestions","quickSuggestionsDelay","parameterHints","iconsInSuggestions","autoClosingBrackets","formatOnType","suggestOnTriggerCharacters","acceptSuggestionOnEnter","snippetSuggestions","tabCompletion","wordBasedSuggestions","selectionHighlight","codeLens","folding","renderWhitespace","renderControlCharacters","renderIndentGuides","renderLineHighlight","useTabStops","fontFamily","fontWeight","fontSize","lineHeight","value","keys","forEach","key","undefined","valueChange","valueToCompare","valueToCompareChange","getModel","Component","args","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","selector","styles","template","host","(window:resize)","Input","autoFormatOnLoad","Output","ViewChild","static","EventEmitter","AjfMonacoEditorModule","NgModule","declarations","exports"],"mappings":"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"}