import { AjfAggregationType, AjfChartType, AjfWidgetType, } from '@ajf/core/reports';
import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { Subscription } from 'rxjs';
import { AjfReportBuilderFormsAnalyzerDialog } from './forms-analyzer-dialog';
import { AjfReportBuilderService } from './report-builder-service';
import * as i0 from "@angular/core";
import * as i1 from "./report-builder-service";
import * as i2 from "@angular/material/dialog";
import * as i3 from "@angular/material/tabs";
import * as i4 from "@angular/material/button";
import * as i5 from "@angular/material/grid-list";
import * as i6 from "@angular/common";
import * as i7 from "@ngneat/transloco";
/**
 * this component provides the support for connect the form fields with the report
 *
 * @export
 */
export class AjfReportBuilderFormsAnalyzer {
    constructor(_service, dialog) {
        this._service = _service;
        this.dialog = dialog;
        this.currentWidget = null;
        this.forms = [];
        this.choicesOrigins = {};
        this.currentMainDataIndex = -1;
        this._dataset = [];
        this._currentWidgetSub = Subscription.EMPTY;
        this._formAnalyzerSub = Subscription.EMPTY;
        this._currentWidgetSub = this._service.currentWidget.subscribe(x => {
            if (x != null) {
                this.currentWidget = x;
                // this._dataset = myObj.dataset;
            }
            else {
                this.currentWidget = null;
            }
        });
        this._formAnalyzerSub = this._service.formsVariables.subscribe(x => {
            if (x != null) {
                this.formsVariables = x;
            }
        });
    }
    setCurrentIndex(index) {
        this.currentMainDataIndex = index;
    }
    isSelected(index) {
        if (index === this.currentMainDataIndex) {
            return 'primary';
        }
        else {
            return undefined;
        }
    }
    /**
     *  get the X components label of the chart.
     *  they are contained in the first row of dataset
     *
     *
     * @memberof AjfReportBuilderFormsAnalyzer
     */
    getMainData() {
        if (this._dataset[0] != null) {
            let mainData = [];
            for (let i = 0; i < this._dataset[0].length; i++) {
                mainData.push(this._dataset[0][i].label || '');
            }
            return mainData;
        }
        else {
            return [];
        }
    }
    /**
     *  get the Y components label of the chart.
     *  they are contained in the first column of dataset
     *
     *
     * @memberof AjfReportBuilderFormsAnalyzer
     */
    getDataset() {
        let dataset = [];
        if (this._dataset[0] != null) {
            for (let i = 1; i < this._dataset.length; i++) {
                dataset.push(this._dataset[i][0].label || '');
            }
            return dataset;
        }
        else {
            return [];
        }
    }
    /**
     * get the related data label of the chart.
     * they are contained in the row of the Y component
     *
     *
     * @memberof AjfReportBuilderFormsAnalyzer
     */
    getRelatedData() {
        if (this._dataset[this.currentMainDataIndex + 1] != null) {
            let relatedData = [];
            for (let i = 1; i < this._dataset[this.currentMainDataIndex + 1].length; i++) {
                relatedData.push(this._dataset[this.currentMainDataIndex + 1][i].label || '');
            }
            return relatedData;
        }
        else {
            return [];
        }
    }
    getTableHeader() {
        let mainData = [];
        if (this._dataset != null) {
            for (let i = 0; i < this._dataset.length; i++) {
                if (this._dataset[i][0] != null) {
                    mainData.push(this._dataset[i][0].label || '');
                }
            }
        }
        return mainData;
    }
    getTableData() {
        if (this._dataset[this.currentMainDataIndex] != null) {
            let tableData = [];
            for (let i = 1; i < this._dataset[this.currentMainDataIndex].length; i++) {
                if (this._dataset[this.currentMainDataIndex][i] != null) {
                    tableData.push(this._dataset[this.currentMainDataIndex][i].label || '');
                }
            }
            return tableData;
        }
        else {
            return [];
        }
    }
    needMainData() {
        let myObj = this.currentWidget;
        if (myObj.chartType === AjfChartType.Scatter || myObj.chartType === AjfChartType.Bubble) {
            return false;
        }
        else {
            return true;
        }
    }
    removeMainData(index) {
        this._service.removeMainData(index);
    }
    removeDataset(index) {
        this.currentMainDataIndex = index;
        this._service.removeRelatedData(this.currentMainDataIndex, -1);
    }
    removeTableMainData(index) {
        this._service.removeTableMainData(index);
    }
    removeRelatedData(index) {
        this._service.removeRelatedData(this.currentMainDataIndex, index);
    }
    removeData(mainIndex, index) {
        this._service.removeData(mainIndex, index);
    }
    /**
     *
     *
     *
     * @param index
     * @param editMode
     *
     * @memberof AjfReportBuilderFormsAnalyzer
     */
    openDialog(level, mainIndex, index, editMode) {
        this.dialogRef = this.dialog.open(AjfReportBuilderFormsAnalyzerDialog);
        if (editMode) {
            if (level === 1 && index === -1) {
                index = 0;
            }
            if (level === 1) {
                if (this.currentWidget != null && this.currentWidget.widgetType == AjfWidgetType.Chart) {
                    mainIndex++;
                }
                index++;
            }
            this.dialogRef.componentInstance.labelText =
                (this._dataset[mainIndex] && this._dataset[mainIndex][index].label) || '';
            /* this.dialogRef.componentInstance.formula =
              this._dataset[mainIndex] &&
              this._dataset[mainIndex][index].formula.formula || ''; */
            this.dialogRef.componentInstance.aggregation =
                (this._dataset[mainIndex] && this._dataset[mainIndex][index].aggregation.aggregation) ||
                    AjfAggregationType.None;
        }
        else {
            this.dialogRef.componentInstance.labelText = '';
            this.dialogRef.componentInstance.formula = '';
            this.dialogRef.componentInstance.aggregation = 0;
        }
        // this.dialogRef.componentInstance.formsVariables = this.formsVariables;
        this.dialogRef.componentInstance.currentWidget = this.currentWidget;
        this.dialogRef.componentInstance.level = level;
        this.dialogRef.componentInstance.mainIndex = mainIndex;
        this.dialogRef.componentInstance.index = index;
        this.dialogRef.componentInstance.init = false;
    }
    openDialogAddMainData() {
        this.openDialog(0, -1, -1, false);
    }
    openDialogChartEditMainData() {
        this.openDialog(0, 0, this.currentMainDataIndex, true);
    }
    openDialogTableEditMainData() {
        this.openDialog(0, this.currentMainDataIndex, 0, true);
    }
    openDialogChartAddDataset() {
        this.openDialog(1, -1, -1, false);
    }
    openDialogTableAddDataset() {
        this.openDialog(1, this.currentMainDataIndex, -1, false);
    }
    openDialogChartAddDataOfDataset() {
        this.openDialog(1, this.currentMainDataIndex, -1, false);
    }
    openDialogChartEditDataset() {
        this.openDialog(1, this.currentMainDataIndex, -1, true);
    }
    openDialogTableEditDataset(index) {
        this.openDialog(1, this.currentMainDataIndex, index, true);
    }
    openDialogChartEditDataOfDataset(index) {
        this.openDialog(1, this.currentMainDataIndex, index, true);
    }
    ngOnDestroy() {
        this._currentWidgetSub.unsubscribe();
        this._formAnalyzerSub.unsubscribe();
    }
}
AjfReportBuilderFormsAnalyzer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.0-next.15", ngImport: i0, type: AjfReportBuilderFormsAnalyzer, deps: [{ token: i1.AjfReportBuilderService }, { token: i2.MatDialog }], target: i0.ɵɵFactoryTarget.Component });
AjfReportBuilderFormsAnalyzer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.0-next.15", type: AjfReportBuilderFormsAnalyzer, selector: "ajf-report-builder-forms-analyzer", ngImport: i0, template: "<ng-template [ngIf]=\"currentWidget != null && formsVariables != null\">\n  <ng-template [ngIf]=\"currentWidget.widgetType == 4\">\n    <ng-template [ngIf]=\"needMainData()\">\n      <mat-tab-group>\n        <mat-tab [label]=\"'Main Data' | transloco\">\n          <button\n            mat-button\n            (click)=\"openDialogAddMainData()\"\n            style=\"width: 100%\"\n          >\n            Add Main Data\n          </button>\n          <mat-grid-list rowHeight=\"50px\" cols=\"3\">\n            <ng-template\n              ngFor\n              let-label\n              [ngForOf]=\"getMainData()\"\n              let-idx=\"index\"\n            >\n              <mat-grid-tile> {{ label }} </mat-grid-tile>\n              <mat-grid-tile>\n                <button\n                  mat-button\n                  (click)=\"setCurrentIndex(idx);openDialogChartEditMainData()\"\n                >\n                  {{'Edit'|transloco}}\n                </button>\n              </mat-grid-tile>\n              <mat-grid-tile>\n                <button mat-button (click)=\"removeMainData(idx)\">\n                  {{'Remove'|transloco}}\n                </button>\n              </mat-grid-tile>\n            </ng-template>\n          </mat-grid-list>\n          <div class=\"ajf-ui ajf-divider\"></div>\n        </mat-tab>\n      </mat-tab-group>\n    </ng-template>\n    <mat-tab-group>\n      <mat-tab label=\"dataset\">\n        <button\n          mat-button\n          (click)=\"openDialogChartAddDataset()\"\n          style=\"width: 100%\"\n        >\n          {{'add dataset'|transloco}}\n        </button>\n        <mat-grid-list rowHeight=\"50px\" cols=\"4\">\n          <ng-template ngFor let-label [ngForOf]=\"getDataset()\" let-idx=\"index\">\n            <mat-grid-tile>\n              <button\n                mat-button\n                [color]=\"isSelected(idx)\"\n                (click)=\"setCurrentIndex(idx)\"\n              >\n                {{ label|transloco }}\n              </button>\n            </mat-grid-tile>\n            <mat-grid-tile>\n              <button\n                mat-button\n                (click)=\"setCurrentIndex(idx);openDialogChartAddDataOfDataset()\"\n                style=\"width: 100%\"\n              >\n                {{'add data'|transloco}}\n              </button>\n            </mat-grid-tile>\n            <mat-grid-tile>\n              <button\n                mat-button\n                (click)=\"setCurrentIndex(idx);openDialogChartEditDataset()\"\n              >\n                {{'Edit'|transloco}}\n              </button>\n            </mat-grid-tile>\n            <mat-grid-tile>\n              <button mat-button (click)=\"removeDataset(idx)\">\n                {{'Remove'|transloco}}\n              </button>\n            </mat-grid-tile>\n          </ng-template>\n        </mat-grid-list>\n      </mat-tab>\n      <mat-tab label=\"data\">\n        <mat-grid-list rowHeight=\"50px\" cols=\"3\">\n          <ng-template\n            ngFor\n            let-label\n            [ngForOf]=\"getRelatedData()\"\n            let-idx=\"index\"\n          >\n            <mat-grid-tile> {{ label|transloco }} </mat-grid-tile>\n            <mat-grid-tile>\n              <button\n                mat-button\n                (click)=\"openDialogChartEditDataOfDataset(idx)\"\n              >\n                {{'Edit'|transloco}}\n              </button>\n            </mat-grid-tile>\n            <mat-grid-tile>\n              <button mat-button (click)=\"removeRelatedData(idx)\">\n                {{'Remove'|transloco}}\n              </button>\n            </mat-grid-tile>\n          </ng-template>\n        </mat-grid-list>\n        <div class=\"ajf-ui ajf-divider\"></div>\n      </mat-tab>\n    </mat-tab-group>\n  </ng-template>\n  <ng-template [ngIf]=\"currentWidget.widgetType == 5\">\n    <ng-template [ngIf]=\"needMainData()\">\n      <mat-tab-group>\n        <mat-tab [label]=\"'Main Data' | transloco\">\n          <button\n            mat-button\n            (click)=\"openDialogAddMainData()\"\n            style=\"width: 100%\"\n          >\n            {{'Add Main Data'|transloco}}\n          </button>\n          <mat-grid-list rowHeight=\"50px\" cols=\"4\">\n            <ng-template\n              ngFor\n              let-label\n              [ngForOf]=\"getTableHeader()\"\n              let-idx=\"index\"\n            >\n              <mat-grid-tile>\n                <button\n                  mat-button\n                  [color]=\"isSelected(idx)\"\n                  (click)=\"setCurrentIndex(idx)\"\n                >\n                  {{ label }}\n                </button>\n              </mat-grid-tile>\n              <mat-grid-tile>\n                <button\n                  mat-button\n                  (click)=\"setCurrentIndex(idx);openDialogTableAddDataset()\"\n                  style=\"width: 100%\"\n                >\n                  {{'add data'|transloco}}\n                </button>\n              </mat-grid-tile>\n              <mat-grid-tile>\n                <button\n                  mat-button\n                  (click)=\"setCurrentIndex(idx);openDialogTableEditMainData()\"\n                >\n                  {{'Edit'|transloco}}\n                </button>\n              </mat-grid-tile>\n              <mat-grid-tile>\n                <button mat-button (click)=\"removeTableMainData(idx)\">\n                  {{'Remove'|transloco}}\n                </button>\n              </mat-grid-tile>\n            </ng-template>\n          </mat-grid-list>\n          <div class=\"ajf-ui ajf-divider\"></div>\n        </mat-tab>\n        <mat-tab [label]=\"'data' | transloco\">\n          <mat-grid-list rowHeight=\"50px\" cols=\"3\">\n            <ng-template\n              ngFor\n              let-label\n              [ngForOf]=\"getTableData()\"\n              let-idx=\"index\"\n            >\n              <mat-grid-tile> {{ label|transloco }} </mat-grid-tile>\n              <mat-grid-tile>\n                <button mat-button (click)=\"openDialogTableEditDataset(idx)\">\n                  {{'Edit'|transloco}}\n                </button>\n              </mat-grid-tile>\n              <mat-grid-tile>\n                <button\n                  mat-button\n                  (click)=\"removeData(currentMainDataIndex, idx + 1)\"\n                >\n                  {{'Remove'|transloco}}\n                </button>\n              </mat-grid-tile>\n            </ng-template>\n          </mat-grid-list>\n          <div class=\"ajf-ui ajf-divider\"></div>\n        </mat-tab>\n      </mat-tab-group>\n    </ng-template>\n  </ng-template>\n</ng-template>\n", styles: ["ajf-report-builder-forms-analyzer{min-height:512px}ajf-report-builder-forms-analyzer .ajf-editor{flex:.75 0 auto;display:flex;flex-direction:row;align-items:stretch}ajf-report-builder-forms-analyzer .ajf-editor monaco-editor{flex:1 0 auto;min-width:512px;min-height:256px}ajf-report-builder-forms-analyzer mat-dialog-container{flex:1 0 auto;min-width:512px;min-height:256px}ajf-report-builder-forms-analyzer .ajf-editor-panel{flex:.25 0 auto;overflow-y:auto}ajf-report-builder-forms-analyzer .mat-list-item-content{position:normal !important;display:block !important;height:350px !important}ajf-report-builder-forms-analyzer mat-tab-group .mat-tab-body-wrapper,ajf-report-builder-forms-analyzer mat-tab-group .mat-list-item-content{position:normal !important;display:block !important;height:350px !important}\n"], components: [{ type: i3.MatTabGroup, selector: "mat-tab-group", inputs: ["color", "disableRipple"], exportAs: ["matTabGroup"] }, { type: i3.MatTab, selector: "mat-tab", inputs: ["disabled", "label", "aria-label", "aria-labelledby"], exportAs: ["matTab"] }, { type: i4.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { type: i5.MatGridList, selector: "mat-grid-list", inputs: ["cols", "gutterSize", "rowHeight"], exportAs: ["matGridList"] }, { type: i5.MatGridTile, selector: "mat-grid-tile", inputs: ["rowspan", "colspan"], exportAs: ["matGridTile"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "transloco": i7.TranslocoPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.0-next.15", ngImport: i0, type: AjfReportBuilderFormsAnalyzer, decorators: [{
            type: Component,
            args: [{ selector: 'ajf-report-builder-forms-analyzer', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-template [ngIf]=\"currentWidget != null && formsVariables != null\">\n  <ng-template [ngIf]=\"currentWidget.widgetType == 4\">\n    <ng-template [ngIf]=\"needMainData()\">\n      <mat-tab-group>\n        <mat-tab [label]=\"'Main Data' | transloco\">\n          <button\n            mat-button\n            (click)=\"openDialogAddMainData()\"\n            style=\"width: 100%\"\n          >\n            Add Main Data\n          </button>\n          <mat-grid-list rowHeight=\"50px\" cols=\"3\">\n            <ng-template\n              ngFor\n              let-label\n              [ngForOf]=\"getMainData()\"\n              let-idx=\"index\"\n            >\n              <mat-grid-tile> {{ label }} </mat-grid-tile>\n              <mat-grid-tile>\n                <button\n                  mat-button\n                  (click)=\"setCurrentIndex(idx);openDialogChartEditMainData()\"\n                >\n                  {{'Edit'|transloco}}\n                </button>\n              </mat-grid-tile>\n              <mat-grid-tile>\n                <button mat-button (click)=\"removeMainData(idx)\">\n                  {{'Remove'|transloco}}\n                </button>\n              </mat-grid-tile>\n            </ng-template>\n          </mat-grid-list>\n          <div class=\"ajf-ui ajf-divider\"></div>\n        </mat-tab>\n      </mat-tab-group>\n    </ng-template>\n    <mat-tab-group>\n      <mat-tab label=\"dataset\">\n        <button\n          mat-button\n          (click)=\"openDialogChartAddDataset()\"\n          style=\"width: 100%\"\n        >\n          {{'add dataset'|transloco}}\n        </button>\n        <mat-grid-list rowHeight=\"50px\" cols=\"4\">\n          <ng-template ngFor let-label [ngForOf]=\"getDataset()\" let-idx=\"index\">\n            <mat-grid-tile>\n              <button\n                mat-button\n                [color]=\"isSelected(idx)\"\n                (click)=\"setCurrentIndex(idx)\"\n              >\n                {{ label|transloco }}\n              </button>\n            </mat-grid-tile>\n            <mat-grid-tile>\n              <button\n                mat-button\n                (click)=\"setCurrentIndex(idx);openDialogChartAddDataOfDataset()\"\n                style=\"width: 100%\"\n              >\n                {{'add data'|transloco}}\n              </button>\n            </mat-grid-tile>\n            <mat-grid-tile>\n              <button\n                mat-button\n                (click)=\"setCurrentIndex(idx);openDialogChartEditDataset()\"\n              >\n                {{'Edit'|transloco}}\n              </button>\n            </mat-grid-tile>\n            <mat-grid-tile>\n              <button mat-button (click)=\"removeDataset(idx)\">\n                {{'Remove'|transloco}}\n              </button>\n            </mat-grid-tile>\n          </ng-template>\n        </mat-grid-list>\n      </mat-tab>\n      <mat-tab label=\"data\">\n        <mat-grid-list rowHeight=\"50px\" cols=\"3\">\n          <ng-template\n            ngFor\n            let-label\n            [ngForOf]=\"getRelatedData()\"\n            let-idx=\"index\"\n          >\n            <mat-grid-tile> {{ label|transloco }} </mat-grid-tile>\n            <mat-grid-tile>\n              <button\n                mat-button\n                (click)=\"openDialogChartEditDataOfDataset(idx)\"\n              >\n                {{'Edit'|transloco}}\n              </button>\n            </mat-grid-tile>\n            <mat-grid-tile>\n              <button mat-button (click)=\"removeRelatedData(idx)\">\n                {{'Remove'|transloco}}\n              </button>\n            </mat-grid-tile>\n          </ng-template>\n        </mat-grid-list>\n        <div class=\"ajf-ui ajf-divider\"></div>\n      </mat-tab>\n    </mat-tab-group>\n  </ng-template>\n  <ng-template [ngIf]=\"currentWidget.widgetType == 5\">\n    <ng-template [ngIf]=\"needMainData()\">\n      <mat-tab-group>\n        <mat-tab [label]=\"'Main Data' | transloco\">\n          <button\n            mat-button\n            (click)=\"openDialogAddMainData()\"\n            style=\"width: 100%\"\n          >\n            {{'Add Main Data'|transloco}}\n          </button>\n          <mat-grid-list rowHeight=\"50px\" cols=\"4\">\n            <ng-template\n              ngFor\n              let-label\n              [ngForOf]=\"getTableHeader()\"\n              let-idx=\"index\"\n            >\n              <mat-grid-tile>\n                <button\n                  mat-button\n                  [color]=\"isSelected(idx)\"\n                  (click)=\"setCurrentIndex(idx)\"\n                >\n                  {{ label }}\n                </button>\n              </mat-grid-tile>\n              <mat-grid-tile>\n                <button\n                  mat-button\n                  (click)=\"setCurrentIndex(idx);openDialogTableAddDataset()\"\n                  style=\"width: 100%\"\n                >\n                  {{'add data'|transloco}}\n                </button>\n              </mat-grid-tile>\n              <mat-grid-tile>\n                <button\n                  mat-button\n                  (click)=\"setCurrentIndex(idx);openDialogTableEditMainData()\"\n                >\n                  {{'Edit'|transloco}}\n                </button>\n              </mat-grid-tile>\n              <mat-grid-tile>\n                <button mat-button (click)=\"removeTableMainData(idx)\">\n                  {{'Remove'|transloco}}\n                </button>\n              </mat-grid-tile>\n            </ng-template>\n          </mat-grid-list>\n          <div class=\"ajf-ui ajf-divider\"></div>\n        </mat-tab>\n        <mat-tab [label]=\"'data' | transloco\">\n          <mat-grid-list rowHeight=\"50px\" cols=\"3\">\n            <ng-template\n              ngFor\n              let-label\n              [ngForOf]=\"getTableData()\"\n              let-idx=\"index\"\n            >\n              <mat-grid-tile> {{ label|transloco }} </mat-grid-tile>\n              <mat-grid-tile>\n                <button mat-button (click)=\"openDialogTableEditDataset(idx)\">\n                  {{'Edit'|transloco}}\n                </button>\n              </mat-grid-tile>\n              <mat-grid-tile>\n                <button\n                  mat-button\n                  (click)=\"removeData(currentMainDataIndex, idx + 1)\"\n                >\n                  {{'Remove'|transloco}}\n                </button>\n              </mat-grid-tile>\n            </ng-template>\n          </mat-grid-list>\n          <div class=\"ajf-ui ajf-divider\"></div>\n        </mat-tab>\n      </mat-tab-group>\n    </ng-template>\n  </ng-template>\n</ng-template>\n", styles: ["ajf-report-builder-forms-analyzer{min-height:512px}ajf-report-builder-forms-analyzer .ajf-editor{flex:.75 0 auto;display:flex;flex-direction:row;align-items:stretch}ajf-report-builder-forms-analyzer .ajf-editor monaco-editor{flex:1 0 auto;min-width:512px;min-height:256px}ajf-report-builder-forms-analyzer mat-dialog-container{flex:1 0 auto;min-width:512px;min-height:256px}ajf-report-builder-forms-analyzer .ajf-editor-panel{flex:.25 0 auto;overflow-y:auto}ajf-report-builder-forms-analyzer .mat-list-item-content{position:normal !important;display:block !important;height:350px !important}ajf-report-builder-forms-analyzer mat-tab-group .mat-tab-body-wrapper,ajf-report-builder-forms-analyzer mat-tab-group .mat-list-item-content{position:normal !important;display:block !important;height:350px !important}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.AjfReportBuilderService }, { type: i2.MatDialog }]; } });
//# sourceMappingURL=data:application/json;base64,