import { AjfFormRendererService } from '@ajf/core/forms';
import { evaluateExpression } from '@ajf/core/models';
import { AjfBaseWidgetComponent, widgetToWidgetInstance, } from '@ajf/core/reports';
import { ChangeDetectionStrategy, Component, Output, ViewEncapsulation, } from '@angular/core';
import { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@ajf/core/transloco";
import * as i2 from "@ajf/core/forms";
import * as i3 from "@ajf/material/forms";
import * as i4 from "@angular/common";
export class AjfFilterWidgetComponent extends AjfBaseWidgetComponent {
    constructor(cdr, el, _ts, _formRenderer) {
        super(cdr, el);
        this._ts = _ts;
        this._formRenderer = _formRenderer;
        this.filteredInstance = this._formRenderer.formGroup.pipe(filter(fg => this.instance != null && this.instance.filter != null && fg != null), switchMap(formGroup => formGroup.valueChanges), distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b)), map(a => {
            const instance = this.instance;
            const filter = instance.filter;
            const newConst = { ...(filter.context || {}), ...a };
            if (filter.variables != null) {
                (filter.variables || []).forEach(variable => {
                    newConst[variable.name] = evaluateExpression(variable.formula.formula, newConst);
                });
            }
            this.instance = widgetToWidgetInstance(instance.widget, newConst, this._ts, filter.variables);
            return this.instance;
        }));
    }
}
AjfFilterWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.5", ngImport: i0, type: AjfFilterWidgetComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i1.TranslocoService }, { token: i2.AjfFormRendererService }], target: i0.ɵɵFactoryTarget.Component });
AjfFilterWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.5", type: AjfFilterWidgetComponent, selector: "ajf-filter-widget", outputs: { filteredInstance: "filteredInstance" }, providers: [AjfFormRendererService], usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"instance\">\n  <div *ngIf=\"instance.filter as filter\" class=\"ajf-filter-container\">\n    <ajf-form\n      [form]=\"filter.form\"\n      [hasStartMessage]=\"false\"\n      [hasEndMessage]=\"false\"\n      [hideTopToolbar]=\"true\"\n      [hideBottomToolbar]=\"true\"\n      [hideNavigationButtons]=\"true\"\n    ></ajf-form>\n  </div>\n</ng-container>\n", styles: ["ajf-filter-widget .ajf-filter-container ajf-page-slider-item{flex:auto!important}ajf-filter-widget .ajf-filter-container ajf-page-slider-item .ajf-page-slider-item-content{position:relative}ajf-filter-widget .ajf-filter-container .ajf-form-container{position:relative}ajf-filter-widget .ajf-filter-container .ajf-form-container .mat-card-header{display:none}ajf-filter-widget .ajf-field-entry{width:unset!important;min-width:200px}\n"], components: [{ type: i3.AjfFormRenderer, selector: "ajf-form", inputs: ["topBar"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.5", ngImport: i0, type: AjfFilterWidgetComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ajf-filter-widget', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [AjfFormRendererService], template: "<ng-container *ngIf=\"instance\">\n  <div *ngIf=\"instance.filter as filter\" class=\"ajf-filter-container\">\n    <ajf-form\n      [form]=\"filter.form\"\n      [hasStartMessage]=\"false\"\n      [hasEndMessage]=\"false\"\n      [hideTopToolbar]=\"true\"\n      [hideBottomToolbar]=\"true\"\n      [hideNavigationButtons]=\"true\"\n    ></ajf-form>\n  </div>\n</ng-container>\n", styles: ["ajf-filter-widget .ajf-filter-container ajf-page-slider-item{flex:auto!important}ajf-filter-widget .ajf-filter-container ajf-page-slider-item .ajf-page-slider-item-content{position:relative}ajf-filter-widget .ajf-filter-container .ajf-form-container{position:relative}ajf-filter-widget .ajf-filter-container .ajf-form-container .mat-card-header{display:none}ajf-filter-widget .ajf-field-entry{width:unset!important;min-width:200px}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.TranslocoService }, { type: i2.AjfFormRendererService }]; }, propDecorators: { filteredInstance: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLXdpZGdldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL21hdGVyaWFsL3JlcG9ydHMvc3JjL2ZpbHRlci13aWRnZXQudHMiLCIuLi8uLi8uLi8uLi9wcm9qZWN0cy9tYXRlcmlhbC9yZXBvcnRzL3NyYy9maWx0ZXItd2lkZ2V0Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdUJBLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBQ3BELE9BQU8sRUFDTCxzQkFBc0IsRUFHdEIsc0JBQXNCLEdBQ3ZCLE1BQU0sbUJBQW1CLENBQUM7QUFFM0IsT0FBTyxFQUNMLHVCQUF1QixFQUV2QixTQUFTLEVBRVQsTUFBTSxFQUNOLGlCQUFpQixHQUNsQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsb0JBQW9CLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7O0FBVzVFLE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxzQkFBeUM7SUFHckYsWUFDRSxHQUFzQixFQUN0QixFQUFjLEVBQ04sR0FBcUIsRUFDckIsYUFBcUM7UUFFN0MsS0FBSyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUhQLFFBQUcsR0FBSCxHQUFHLENBQWtCO1FBQ3JCLGtCQUFhLEdBQWIsYUFBYSxDQUF3QjtRQUk3QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUN2RCxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sSUFBSSxJQUFJLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxFQUNqRixTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBRSxTQUF1QixDQUFDLFlBQVksQ0FBQyxFQUM3RCxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUN2RSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDTixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBNkIsQ0FBQztZQUNwRCxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsTUFBMkIsQ0FBQztZQUNwRCxNQUFNLFFBQVEsR0FBUSxFQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFDLENBQUM7WUFDeEQsSUFBSSxNQUFNLENBQUMsU0FBUyxJQUFJLElBQUksRUFBRTtnQkFDNUIsQ0FBQyxNQUFNLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtvQkFDMUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztnQkFDbkYsQ0FBQyxDQUFDLENBQUM7YUFDSjtZQUNELElBQUksQ0FBQyxRQUFRLEdBQUcsc0JBQXNCLENBQ3BDLFFBQVEsQ0FBQyxNQUFNLEVBQ2YsUUFBUSxFQUNSLElBQUksQ0FBQyxHQUFHLEVBQ1IsTUFBTSxDQUFDLFNBQVMsQ0FDSSxDQUFDO1lBQ3ZCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUN2QixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQzs7cUhBakNVLHdCQUF3Qjt5R0FBeEIsd0JBQXdCLCtGQUZ4QixDQUFDLHNCQUFzQixDQUFDLGlEQ2pEckMsNFhBWUE7MkZEdUNhLHdCQUF3QjtrQkFScEMsU0FBUzsrQkFDRSxtQkFBbUIsbUJBR1osdUJBQXVCLENBQUMsTUFBTSxpQkFDaEMsaUJBQWlCLENBQUMsSUFBSSxhQUMxQixDQUFDLHNCQUFzQixDQUFDO3FNQUdoQixnQkFBZ0I7c0JBQWxDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKEMpIEdudWNvb3Agc29jLiBjb29wLlxuICpcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpLlxuICpcbiAqIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yXG4gKiBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXNcbiAqIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLFxuICogb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVSBBZmZlcm9cbiAqIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKS5cbiAqIElmIG5vdCwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8uXG4gKlxuICovXG5cbmltcG9ydCB7Rm9ybUdyb3VwfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge0FqZkZvcm1SZW5kZXJlclNlcnZpY2V9IGZyb20gJ0BhamYvY29yZS9mb3Jtcyc7XG5pbXBvcnQge2V2YWx1YXRlRXhwcmVzc2lvbn0gZnJvbSAnQGFqZi9jb3JlL21vZGVscyc7XG5pbXBvcnQge1xuICBBamZCYXNlV2lkZ2V0Q29tcG9uZW50LFxuICBBamZGaWx0ZXJJbnN0YW5jZSxcbiAgQWpmV2lkZ2V0SW5zdGFuY2UsXG4gIHdpZGdldFRvV2lkZ2V0SW5zdGFuY2UsXG59IGZyb20gJ0BhamYvY29yZS9yZXBvcnRzJztcbmltcG9ydCB7VHJhbnNsb2NvU2VydmljZX0gZnJvbSAnQGFqZi9jb3JlL3RyYW5zbG9jbyc7XG5pbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgT3V0cHV0LFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge2Rpc3RpbmN0VW50aWxDaGFuZ2VkLCBmaWx0ZXIsIG1hcCwgc3dpdGNoTWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhamYtZmlsdGVyLXdpZGdldCcsXG4gIHRlbXBsYXRlVXJsOiAnZmlsdGVyLXdpZGdldC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJ2ZpbHRlci13aWRnZXQuc2NzcyddLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgcHJvdmlkZXJzOiBbQWpmRm9ybVJlbmRlcmVyU2VydmljZV0sXG59KVxuZXhwb3J0IGNsYXNzIEFqZkZpbHRlcldpZGdldENvbXBvbmVudCBleHRlbmRzIEFqZkJhc2VXaWRnZXRDb21wb25lbnQ8QWpmV2lkZ2V0SW5zdGFuY2U+IHtcbiAgQE91dHB1dCgpIHJlYWRvbmx5IGZpbHRlcmVkSW5zdGFuY2U6IE9ic2VydmFibGU8QWpmV2lkZ2V0SW5zdGFuY2U+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgZWw6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSBfdHM6IFRyYW5zbG9jb1NlcnZpY2UsXG4gICAgcHJpdmF0ZSBfZm9ybVJlbmRlcmVyOiBBamZGb3JtUmVuZGVyZXJTZXJ2aWNlLFxuICApIHtcbiAgICBzdXBlcihjZHIsIGVsKTtcblxuICAgIHRoaXMuZmlsdGVyZWRJbnN0YW5jZSA9IHRoaXMuX2Zvcm1SZW5kZXJlci5mb3JtR3JvdXAucGlwZShcbiAgICAgIGZpbHRlcihmZyA9PiB0aGlzLmluc3RhbmNlICE9IG51bGwgJiYgdGhpcy5pbnN0YW5jZS5maWx0ZXIgIT0gbnVsbCAmJiBmZyAhPSBudWxsKSxcbiAgICAgIHN3aXRjaE1hcChmb3JtR3JvdXAgPT4gKGZvcm1Hcm91cCBhcyBGb3JtR3JvdXApLnZhbHVlQ2hhbmdlcyksXG4gICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgoYSwgYikgPT4gSlNPTi5zdHJpbmdpZnkoYSkgPT09IEpTT04uc3RyaW5naWZ5KGIpKSxcbiAgICAgIG1hcChhID0+IHtcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSB0aGlzLmluc3RhbmNlIGFzIEFqZldpZGdldEluc3RhbmNlO1xuICAgICAgICBjb25zdCBmaWx0ZXIgPSBpbnN0YW5jZS5maWx0ZXIgYXMgQWpmRmlsdGVySW5zdGFuY2U7XG4gICAgICAgIGNvbnN0IG5ld0NvbnN0OiBhbnkgPSB7Li4uKGZpbHRlci5jb250ZXh0IHx8IHt9KSwgLi4uYX07XG4gICAgICAgIGlmIChmaWx0ZXIudmFyaWFibGVzICE9IG51bGwpIHtcbiAgICAgICAgICAoZmlsdGVyLnZhcmlhYmxlcyB8fCBbXSkuZm9yRWFjaCh2YXJpYWJsZSA9PiB7XG4gICAgICAgICAgICBuZXdDb25zdFt2YXJpYWJsZS5uYW1lXSA9IGV2YWx1YXRlRXhwcmVzc2lvbih2YXJpYWJsZS5mb3JtdWxhLmZvcm11bGEsIG5ld0NvbnN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluc3RhbmNlID0gd2lkZ2V0VG9XaWRnZXRJbnN0YW5jZShcbiAgICAgICAgICBpbnN0YW5jZS53aWRnZXQsXG4gICAgICAgICAgbmV3Q29uc3QsXG4gICAgICAgICAgdGhpcy5fdHMsXG4gICAgICAgICAgZmlsdGVyLnZhcmlhYmxlcyxcbiAgICAgICAgKSBhcyBBamZXaWRnZXRJbnN0YW5jZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2U7XG4gICAgICB9KSxcbiAgICApO1xuICB9XG59XG4iLCI8bmctY29udGFpbmVyICpuZ0lmPVwiaW5zdGFuY2VcIj5cbiAgPGRpdiAqbmdJZj1cImluc3RhbmNlLmZpbHRlciBhcyBmaWx0ZXJcIiBjbGFzcz1cImFqZi1maWx0ZXItY29udGFpbmVyXCI+XG4gICAgPGFqZi1mb3JtXG4gICAgICBbZm9ybV09XCJmaWx0ZXIuZm9ybVwiXG4gICAgICBbaGFzU3RhcnRNZXNzYWdlXT1cImZhbHNlXCJcbiAgICAgIFtoYXNFbmRNZXNzYWdlXT1cImZhbHNlXCJcbiAgICAgIFtoaWRlVG9wVG9vbGJhcl09XCJ0cnVlXCJcbiAgICAgIFtoaWRlQm90dG9tVG9vbGJhcl09XCJ0cnVlXCJcbiAgICAgIFtoaWRlTmF2aWdhdGlvbkJ1dHRvbnNdPVwidHJ1ZVwiXG4gICAgPjwvYWpmLWZvcm0+XG4gIDwvZGl2PlxuPC9uZy1jb250YWluZXI+XG4iXX0=