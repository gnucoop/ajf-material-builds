/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { AjfBaseWidgetComponent, widgetToWidgetInstance } from '@ajf/core/reports';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Output, ViewEncapsulation, EventEmitter, } from '@angular/core';
import { debounceTime, distinctUntilChanged, filter, skip, switchMap, tap } from 'rxjs/operators';
import { AjfFormRendererService } from '@ajf/core/forms';
import { TranslocoService } from '@ajf/core/transloco';
import { Subscription } from 'rxjs';
import { evaluateExpression } from '@ajf/core/models';
import * as i0 from "@angular/core";
import * as i1 from "@ajf/core/transloco";
import * as i2 from "@ajf/core/forms";
import * as i3 from "@ajf/material/forms";
import * as i4 from "@angular/common";
export class AjfFilterWidgetComponent extends AjfBaseWidgetComponent {
    constructor(cdr, el, _ts, _formRenderer) {
        super(cdr, el);
        this._ts = _ts;
        this._formRenderer = _formRenderer;
        this.filteredInstance = new EventEmitter();
        this._instanceSub = Subscription.EMPTY;
    }
    ngOnDestroy() {
        this._instanceSub.unsubscribe();
    }
    ngOnInit() {
        if (this.instance != null && this.instance.filter != null) {
            this._instanceSub = this._formRenderer.formGroup
                .pipe(filter(fg => fg != null), switchMap(formGroup => formGroup.valueChanges), distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b)), debounceTime(500), skip(1), tap(a => {
                if (this.instance != null && this.instance.filter != null) {
                    const newConst = { ...(this.instance.filter.context || {}), ...a };
                    if (this.instance.filter.variables != null) {
                        (this.instance.filter.variables || []).forEach(variable => {
                            newConst[variable.name] = evaluateExpression(variable.formula.formula, newConst);
                        });
                    }
                    this.instance = widgetToWidgetInstance(this.instance.widget, newConst, this._ts);
                }
            }))
                .subscribe(() => this.filteredInstance.emit(this.instance));
        }
    }
}
AjfFilterWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.0-rc.3", ngImport: i0, type: AjfFilterWidgetComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i1.TranslocoService }, { token: i2.AjfFormRendererService }], target: i0.ɵɵFactoryTarget.Component });
AjfFilterWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.0-rc.3", type: AjfFilterWidgetComponent, selector: "ajf-filter-widget", inputs: { instance: "instance" }, outputs: { filteredInstance: "filteredInstance" }, providers: [AjfFormRendererService], usesInheritance: true, ngImport: i0, template: "<div *ngIf=\"instance.filter as filter\" class=\"ajf-filter-container\">\n  <ajf-form\n    [form]=\"filter.form\"\n    [hasStartMessage]=\"false\"\n    [hasEndMessage]=\"false\"\n    [hideTopToolbar]=\"true\"\n    [hideBottomToolbar]=\"true\"\n    [hideNavigationButtons]=\"true\"\n  ></ajf-form>\n</div>\n", styles: ["ajf-filter-widget .ajf-filter-container ajf-page-slider-item{flex:auto !important}ajf-filter-widget .ajf-filter-container ajf-page-slider-item .ajf-page-slider-item-content{position:relative}ajf-filter-widget .ajf-filter-container .ajf-form-container{position:relative}ajf-filter-widget .ajf-filter-container .ajf-form-container .mat-card-header{display:none}ajf-filter-widget .ajf-field-entry{width:unset !important;min-width:200px}\n"], components: [{ type: i3.AjfFormRenderer, selector: "ajf-form", inputs: ["topBar"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.0-rc.3", ngImport: i0, type: AjfFilterWidgetComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ajf-filter-widget', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [AjfFormRendererService], inputs: ['instance'], template: "<div *ngIf=\"instance.filter as filter\" class=\"ajf-filter-container\">\n  <ajf-form\n    [form]=\"filter.form\"\n    [hasStartMessage]=\"false\"\n    [hasEndMessage]=\"false\"\n    [hideTopToolbar]=\"true\"\n    [hideBottomToolbar]=\"true\"\n    [hideNavigationButtons]=\"true\"\n  ></ajf-form>\n</div>\n", styles: ["ajf-filter-widget .ajf-filter-container ajf-page-slider-item{flex:auto !important}ajf-filter-widget .ajf-filter-container ajf-page-slider-item .ajf-page-slider-item-content{position:relative}ajf-filter-widget .ajf-filter-container .ajf-form-container{position:relative}ajf-filter-widget .ajf-filter-container .ajf-form-container .mat-card-header{display:none}ajf-filter-widget .ajf-field-entry{width:unset !important;min-width:200px}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.TranslocoService }, { type: i2.AjfFormRendererService }]; }, propDecorators: { filteredInstance: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLXdpZGdldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9tYXRlcmlhbC9yZXBvcnRzL2ZpbHRlci13aWRnZXQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvbWF0ZXJpYWwvcmVwb3J0cy9maWx0ZXItd2lkZ2V0Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0JHO0FBRUgsT0FBTyxFQUFDLHNCQUFzQixFQUFxQixzQkFBc0IsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQ3BHLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxVQUFVLEVBRVYsTUFBTSxFQUNOLGlCQUFpQixFQUNqQixZQUFZLEdBRWIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLFlBQVksRUFBRSxvQkFBb0IsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRyxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN2RCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUVyRCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ2xDLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLGtCQUFrQixDQUFDOzs7Ozs7QUFXcEQsTUFBTSxPQUFPLHdCQUNYLFNBQVEsc0JBQXlDO0lBUWpELFlBQ0UsR0FBc0IsRUFDdEIsRUFBYyxFQUNOLEdBQXFCLEVBQ3JCLGFBQXFDO1FBRTdDLEtBQUssQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFIUCxRQUFHLEdBQUgsR0FBRyxDQUFrQjtRQUNyQixrQkFBYSxHQUFiLGFBQWEsQ0FBd0I7UUFUNUIscUJBQWdCLEdBQ2pDLElBQUksWUFBWSxFQUFxQixDQUFDO1FBRWhDLGlCQUFZLEdBQWlCLFlBQVksQ0FBQyxLQUFLLENBQUM7SUFTeEQsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sSUFBSSxJQUFJLEVBQUU7WUFDekQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVM7aUJBQzdDLElBQUksQ0FDSCxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLEVBQ3hCLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFFLFNBQXVCLENBQUMsWUFBWSxDQUFDLEVBQzdELG9CQUFvQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3ZFLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFDakIsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNQLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDTixJQUFJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxJQUFJLElBQUksRUFBRTtvQkFDekQsTUFBTSxRQUFRLEdBQVEsRUFBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFDLENBQUM7b0JBQ3RFLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsU0FBUyxJQUFJLElBQUksRUFBRTt3QkFDMUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFOzRCQUN4RCxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO3dCQUNuRixDQUFDLENBQUMsQ0FBQztxQkFDSjtvQkFDRCxJQUFJLENBQUMsUUFBUSxHQUFHLHNCQUFzQixDQUNwQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFDcEIsUUFBUSxFQUNSLElBQUksQ0FBQyxHQUFHLENBQ1ksQ0FBQztpQkFDeEI7WUFDSCxDQUFDLENBQUMsQ0FDSDtpQkFDQSxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztTQUMvRDtJQUNILENBQUM7OzBIQWpEVSx3QkFBd0I7OEdBQXhCLHdCQUF3QixpSUFIeEIsQ0FBQyxzQkFBc0IsQ0FBQyxpREMvQ3JDLG9UQVVBO2dHRHdDYSx3QkFBd0I7a0JBVHBDLFNBQVM7K0JBQ0UsbUJBQW1CLG1CQUdaLHVCQUF1QixDQUFDLE1BQU0saUJBQ2hDLGlCQUFpQixDQUFDLElBQUksYUFDMUIsQ0FBQyxzQkFBc0IsQ0FBQyxVQUMzQixDQUFDLFVBQVUsQ0FBQztxTUFNRCxnQkFBZ0I7c0JBQWxDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKEMpIEdudWNvb3Agc29jLiBjb29wLlxuICpcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpLlxuICpcbiAqIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yXG4gKiBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXNcbiAqIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLFxuICogb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiBTZWUgdGhlIEdOVSBBZmZlcm9cbiAqIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKS5cbiAqIElmIG5vdCwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8uXG4gKlxuICovXG5cbmltcG9ydCB7QWpmQmFzZVdpZGdldENvbXBvbmVudCwgQWpmV2lkZ2V0SW5zdGFuY2UsIHdpZGdldFRvV2lkZ2V0SW5zdGFuY2V9IGZyb20gJ0BhamYvY29yZS9yZXBvcnRzJztcbmltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBPbkluaXQsXG4gIE91dHB1dCxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG4gIEV2ZW50RW1pdHRlcixcbiAgT25EZXN0cm95LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7ZGVib3VuY2VUaW1lLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgZmlsdGVyLCBza2lwLCBzd2l0Y2hNYXAsIHRhcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtBamZGb3JtUmVuZGVyZXJTZXJ2aWNlfSBmcm9tICdAYWpmL2NvcmUvZm9ybXMnO1xuaW1wb3J0IHtUcmFuc2xvY29TZXJ2aWNlfSBmcm9tICdAYWpmL2NvcmUvdHJhbnNsb2NvJztcbmltcG9ydCB7Rm9ybUdyb3VwfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge1N1YnNjcmlwdGlvbn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2V2YWx1YXRlRXhwcmVzc2lvbn0gZnJvbSAnQGFqZi9jb3JlL21vZGVscyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FqZi1maWx0ZXItd2lkZ2V0JyxcbiAgdGVtcGxhdGVVcmw6ICdmaWx0ZXItd2lkZ2V0Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnZmlsdGVyLXdpZGdldC5jc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIHByb3ZpZGVyczogW0FqZkZvcm1SZW5kZXJlclNlcnZpY2VdLFxuICBpbnB1dHM6IFsnaW5zdGFuY2UnXSxcbn0pXG5leHBvcnQgY2xhc3MgQWpmRmlsdGVyV2lkZ2V0Q29tcG9uZW50XG4gIGV4dGVuZHMgQWpmQmFzZVdpZGdldENvbXBvbmVudDxBamZXaWRnZXRJbnN0YW5jZT5cbiAgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveVxue1xuICBAT3V0cHV0KCkgcmVhZG9ubHkgZmlsdGVyZWRJbnN0YW5jZTogRXZlbnRFbWl0dGVyPEFqZldpZGdldEluc3RhbmNlPiA9XG4gICAgbmV3IEV2ZW50RW1pdHRlcjxBamZXaWRnZXRJbnN0YW5jZT4oKTtcblxuICBwcml2YXRlIF9pbnN0YW5jZVN1YjogU3Vic2NyaXB0aW9uID0gU3Vic2NyaXB0aW9uLkVNUFRZO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgZWw6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSBfdHM6IFRyYW5zbG9jb1NlcnZpY2UsXG4gICAgcHJpdmF0ZSBfZm9ybVJlbmRlcmVyOiBBamZGb3JtUmVuZGVyZXJTZXJ2aWNlLFxuICApIHtcbiAgICBzdXBlcihjZHIsIGVsKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuX2luc3RhbmNlU3ViLnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pbnN0YW5jZSAhPSBudWxsICYmIHRoaXMuaW5zdGFuY2UuZmlsdGVyICE9IG51bGwpIHtcbiAgICAgIHRoaXMuX2luc3RhbmNlU3ViID0gdGhpcy5fZm9ybVJlbmRlcmVyLmZvcm1Hcm91cFxuICAgICAgICAucGlwZShcbiAgICAgICAgICBmaWx0ZXIoZmcgPT4gZmcgIT0gbnVsbCksXG4gICAgICAgICAgc3dpdGNoTWFwKGZvcm1Hcm91cCA9PiAoZm9ybUdyb3VwIGFzIEZvcm1Hcm91cCkudmFsdWVDaGFuZ2VzKSxcbiAgICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgoYSwgYikgPT4gSlNPTi5zdHJpbmdpZnkoYSkgPT09IEpTT04uc3RyaW5naWZ5KGIpKSxcbiAgICAgICAgICBkZWJvdW5jZVRpbWUoNTAwKSxcbiAgICAgICAgICBza2lwKDEpLFxuICAgICAgICAgIHRhcChhID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmluc3RhbmNlICE9IG51bGwgJiYgdGhpcy5pbnN0YW5jZS5maWx0ZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICBjb25zdCBuZXdDb25zdDogYW55ID0gey4uLih0aGlzLmluc3RhbmNlLmZpbHRlci5jb250ZXh0IHx8IHt9KSwgLi4uYX07XG4gICAgICAgICAgICAgIGlmICh0aGlzLmluc3RhbmNlLmZpbHRlci52YXJpYWJsZXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICh0aGlzLmluc3RhbmNlLmZpbHRlci52YXJpYWJsZXMgfHwgW10pLmZvckVhY2godmFyaWFibGUgPT4ge1xuICAgICAgICAgICAgICAgICAgbmV3Q29uc3RbdmFyaWFibGUubmFtZV0gPSBldmFsdWF0ZUV4cHJlc3Npb24odmFyaWFibGUuZm9ybXVsYS5mb3JtdWxhLCBuZXdDb25zdCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZSA9IHdpZGdldFRvV2lkZ2V0SW5zdGFuY2UoXG4gICAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZS53aWRnZXQsXG4gICAgICAgICAgICAgICAgbmV3Q29uc3QsXG4gICAgICAgICAgICAgICAgdGhpcy5fdHMsXG4gICAgICAgICAgICAgICkgYXMgQWpmV2lkZ2V0SW5zdGFuY2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSksXG4gICAgICAgIClcbiAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB0aGlzLmZpbHRlcmVkSW5zdGFuY2UuZW1pdCh0aGlzLmluc3RhbmNlKSk7XG4gICAgfVxuICB9XG59XG4iLCI8ZGl2ICpuZ0lmPVwiaW5zdGFuY2UuZmlsdGVyIGFzIGZpbHRlclwiIGNsYXNzPVwiYWpmLWZpbHRlci1jb250YWluZXJcIj5cbiAgPGFqZi1mb3JtXG4gICAgW2Zvcm1dPVwiZmlsdGVyLmZvcm1cIlxuICAgIFtoYXNTdGFydE1lc3NhZ2VdPVwiZmFsc2VcIlxuICAgIFtoYXNFbmRNZXNzYWdlXT1cImZhbHNlXCJcbiAgICBbaGlkZVRvcFRvb2xiYXJdPVwidHJ1ZVwiXG4gICAgW2hpZGVCb3R0b21Ub29sYmFyXT1cInRydWVcIlxuICAgIFtoaWRlTmF2aWdhdGlvbkJ1dHRvbnNdPVwidHJ1ZVwiXG4gID48L2FqZi1mb3JtPlxuPC9kaXY+XG4iXX0=