/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { AjfFormRendererService } from '@ajf/core/forms';
import { evaluateExpression } from '@ajf/core/models';
import { AjfBaseWidgetComponent, widgetToWidgetInstance, } from '@ajf/core/reports';
import { ChangeDetectionStrategy, Component, Output, ViewEncapsulation, } from '@angular/core';
import { distinctUntilChanged, filter, map, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@ajf/core/transloco";
import * as i2 from "@ajf/core/forms";
import * as i3 from "@ajf/material/forms";
import * as i4 from "@angular/common";
export class AjfFilterWidgetComponent extends AjfBaseWidgetComponent {
    constructor(cdr, el, _ts, _formRenderer) {
        super(cdr, el);
        this._ts = _ts;
        this._formRenderer = _formRenderer;
        this.filteredInstance = this._formRenderer.formGroup.pipe(filter(fg => this.instance != null && this.instance.filter != null && fg != null), switchMap(formGroup => formGroup.valueChanges), distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b)), map(a => {
            const instance = this.instance;
            const filter = instance.filter;
            const newConst = { ...(filter.context || {}), ...a };
            if (filter.variables != null) {
                (filter.variables || []).forEach(variable => {
                    newConst[variable.name] = evaluateExpression(variable.formula.formula, newConst);
                });
            }
            this.instance = widgetToWidgetInstance(instance.widget, newConst, this._ts, filter.variables);
            return this.instance;
        }));
    }
}
AjfFilterWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.5", ngImport: i0, type: AjfFilterWidgetComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i1.TranslocoService }, { token: i2.AjfFormRendererService }], target: i0.ɵɵFactoryTarget.Component });
AjfFilterWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.5", type: AjfFilterWidgetComponent, selector: "ajf-filter-widget", outputs: { filteredInstance: "filteredInstance" }, providers: [AjfFormRendererService], usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"instance\">\n  <div *ngIf=\"instance.filter as filter\" class=\"ajf-filter-container\">\n    <ajf-form\n      [form]=\"filter.form\"\n      [hasStartMessage]=\"false\"\n      [hasEndMessage]=\"false\"\n      [hideTopToolbar]=\"true\"\n      [hideBottomToolbar]=\"true\"\n      [hideNavigationButtons]=\"true\"\n    ></ajf-form>\n  </div>\n</ng-container>\n", styles: ["ajf-filter-widget .ajf-filter-container ajf-page-slider-item{flex:auto!important}ajf-filter-widget .ajf-filter-container ajf-page-slider-item .ajf-page-slider-item-content{position:relative}ajf-filter-widget .ajf-filter-container .ajf-form-container{position:relative}ajf-filter-widget .ajf-filter-container .ajf-form-container .mat-card-header{display:none}ajf-filter-widget .ajf-field-entry{width:unset!important;min-width:200px}\n"], components: [{ type: i3.AjfFormRenderer, selector: "ajf-form", inputs: ["topBar"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.5", ngImport: i0, type: AjfFilterWidgetComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ajf-filter-widget', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [AjfFormRendererService], template: "<ng-container *ngIf=\"instance\">\n  <div *ngIf=\"instance.filter as filter\" class=\"ajf-filter-container\">\n    <ajf-form\n      [form]=\"filter.form\"\n      [hasStartMessage]=\"false\"\n      [hasEndMessage]=\"false\"\n      [hideTopToolbar]=\"true\"\n      [hideBottomToolbar]=\"true\"\n      [hideNavigationButtons]=\"true\"\n    ></ajf-form>\n  </div>\n</ng-container>\n", styles: ["ajf-filter-widget .ajf-filter-container ajf-page-slider-item{flex:auto!important}ajf-filter-widget .ajf-filter-container ajf-page-slider-item .ajf-page-slider-item-content{position:relative}ajf-filter-widget .ajf-filter-container .ajf-form-container{position:relative}ajf-filter-widget .ajf-filter-container .ajf-form-container .mat-card-header{display:none}ajf-filter-widget .ajf-field-entry{width:unset!important;min-width:200px}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.TranslocoService }, { type: i2.AjfFormRendererService }]; }, propDecorators: { filteredInstance: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLXdpZGdldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL21hdGVyaWFsL3JlcG9ydHMvc3JjL2ZpbHRlci13aWRnZXQudHMiLCIuLi8uLi8uLi8uLi9wcm9qZWN0cy9tYXRlcmlhbC9yZXBvcnRzL3NyYy9maWx0ZXItd2lkZ2V0Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0JHO0FBRUgsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDdkQsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFDcEQsT0FBTyxFQUNMLHNCQUFzQixFQUd0QixzQkFBc0IsR0FDdkIsTUFBTSxtQkFBbUIsQ0FBQztBQUUzQixPQUFPLEVBQ0wsdUJBQXVCLEVBRXZCLFNBQVMsRUFFVCxNQUFNLEVBQ04saUJBQWlCLEdBQ2xCLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBQyxvQkFBb0IsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7QUFXNUUsTUFBTSxPQUFPLHdCQUF5QixTQUFRLHNCQUF5QztJQUdyRixZQUNFLEdBQXNCLEVBQ3RCLEVBQWMsRUFDTixHQUFxQixFQUNyQixhQUFxQztRQUU3QyxLQUFLLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBSFAsUUFBRyxHQUFILEdBQUcsQ0FBa0I7UUFDckIsa0JBQWEsR0FBYixhQUFhLENBQXdCO1FBSTdDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQ3ZELE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxJQUFJLElBQUksSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDLEVBQ2pGLFNBQVMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFFLFNBQXVCLENBQUMsWUFBWSxDQUFDLEVBQzdELG9CQUFvQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3ZFLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNOLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUE2QixDQUFDO1lBQ3BELE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxNQUEyQixDQUFDO1lBQ3BELE1BQU0sUUFBUSxHQUFRLEVBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUMsQ0FBQztZQUN4RCxJQUFJLE1BQU0sQ0FBQyxTQUFTLElBQUksSUFBSSxFQUFFO2dCQUM1QixDQUFDLE1BQU0sQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO29CQUMxQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO2dCQUNuRixDQUFDLENBQUMsQ0FBQzthQUNKO1lBQ0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxzQkFBc0IsQ0FDcEMsUUFBUSxDQUFDLE1BQU0sRUFDZixRQUFRLEVBQ1IsSUFBSSxDQUFDLEdBQUcsRUFDUixNQUFNLENBQUMsU0FBUyxDQUNqQixDQUFDO1lBQ0YsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDOztxSEFqQ1Usd0JBQXdCO3lHQUF4Qix3QkFBd0IsK0ZBRnhCLENBQUMsc0JBQXNCLENBQUMsaURDakRyQyw0WEFZQTsyRkR1Q2Esd0JBQXdCO2tCQVJwQyxTQUFTOytCQUNFLG1CQUFtQixtQkFHWix1QkFBdUIsQ0FBQyxNQUFNLGlCQUNoQyxpQkFBaUIsQ0FBQyxJQUFJLGFBQzFCLENBQUMsc0JBQXNCLENBQUM7cU1BR2hCLGdCQUFnQjtzQkFBbEMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoQykgR251Y29vcCBzb2MuIGNvb3AuXG4gKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikuXG4gKlxuICogQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhc1xuICogcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsXG4gKiBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VIEFmZmVyb1xuICogR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpLlxuICogSWYgbm90LCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLy5cbiAqXG4gKi9cblxuaW1wb3J0IHtBamZGb3JtUmVuZGVyZXJTZXJ2aWNlfSBmcm9tICdAYWpmL2NvcmUvZm9ybXMnO1xuaW1wb3J0IHtldmFsdWF0ZUV4cHJlc3Npb259IGZyb20gJ0BhamYvY29yZS9tb2RlbHMnO1xuaW1wb3J0IHtcbiAgQWpmQmFzZVdpZGdldENvbXBvbmVudCxcbiAgQWpmRmlsdGVySW5zdGFuY2UsXG4gIEFqZldpZGdldEluc3RhbmNlLFxuICB3aWRnZXRUb1dpZGdldEluc3RhbmNlLFxufSBmcm9tICdAYWpmL2NvcmUvcmVwb3J0cyc7XG5pbXBvcnQge1RyYW5zbG9jb1NlcnZpY2V9IGZyb20gJ0BhamYvY29yZS90cmFuc2xvY28nO1xuaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIE91dHB1dCxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtGb3JtR3JvdXB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7ZGlzdGluY3RVbnRpbENoYW5nZWQsIGZpbHRlciwgbWFwLCBzd2l0Y2hNYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FqZi1maWx0ZXItd2lkZ2V0JyxcbiAgdGVtcGxhdGVVcmw6ICdmaWx0ZXItd2lkZ2V0Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnZmlsdGVyLXdpZGdldC5zY3NzJ10sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICBwcm92aWRlcnM6IFtBamZGb3JtUmVuZGVyZXJTZXJ2aWNlXSxcbn0pXG5leHBvcnQgY2xhc3MgQWpmRmlsdGVyV2lkZ2V0Q29tcG9uZW50IGV4dGVuZHMgQWpmQmFzZVdpZGdldENvbXBvbmVudDxBamZXaWRnZXRJbnN0YW5jZT4ge1xuICBAT3V0cHV0KCkgcmVhZG9ubHkgZmlsdGVyZWRJbnN0YW5jZTogT2JzZXJ2YWJsZTxBamZXaWRnZXRJbnN0YW5jZT47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBlbDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIF90czogVHJhbnNsb2NvU2VydmljZSxcbiAgICBwcml2YXRlIF9mb3JtUmVuZGVyZXI6IEFqZkZvcm1SZW5kZXJlclNlcnZpY2UsXG4gICkge1xuICAgIHN1cGVyKGNkciwgZWwpO1xuXG4gICAgdGhpcy5maWx0ZXJlZEluc3RhbmNlID0gdGhpcy5fZm9ybVJlbmRlcmVyLmZvcm1Hcm91cC5waXBlKFxuICAgICAgZmlsdGVyKGZnID0+IHRoaXMuaW5zdGFuY2UgIT0gbnVsbCAmJiB0aGlzLmluc3RhbmNlLmZpbHRlciAhPSBudWxsICYmIGZnICE9IG51bGwpLFxuICAgICAgc3dpdGNoTWFwKGZvcm1Hcm91cCA9PiAoZm9ybUdyb3VwIGFzIEZvcm1Hcm91cCkudmFsdWVDaGFuZ2VzKSxcbiAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKChhLCBiKSA9PiBKU09OLnN0cmluZ2lmeShhKSA9PT0gSlNPTi5zdHJpbmdpZnkoYikpLFxuICAgICAgbWFwKGEgPT4ge1xuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IHRoaXMuaW5zdGFuY2UgYXMgQWpmV2lkZ2V0SW5zdGFuY2U7XG4gICAgICAgIGNvbnN0IGZpbHRlciA9IGluc3RhbmNlLmZpbHRlciBhcyBBamZGaWx0ZXJJbnN0YW5jZTtcbiAgICAgICAgY29uc3QgbmV3Q29uc3Q6IGFueSA9IHsuLi4oZmlsdGVyLmNvbnRleHQgfHwge30pLCAuLi5hfTtcbiAgICAgICAgaWYgKGZpbHRlci52YXJpYWJsZXMgIT0gbnVsbCkge1xuICAgICAgICAgIChmaWx0ZXIudmFyaWFibGVzIHx8IFtdKS5mb3JFYWNoKHZhcmlhYmxlID0+IHtcbiAgICAgICAgICAgIG5ld0NvbnN0W3ZhcmlhYmxlLm5hbWVdID0gZXZhbHVhdGVFeHByZXNzaW9uKHZhcmlhYmxlLmZvcm11bGEuZm9ybXVsYSwgbmV3Q29uc3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSB3aWRnZXRUb1dpZGdldEluc3RhbmNlKFxuICAgICAgICAgIGluc3RhbmNlLndpZGdldCxcbiAgICAgICAgICBuZXdDb25zdCxcbiAgICAgICAgICB0aGlzLl90cyxcbiAgICAgICAgICBmaWx0ZXIudmFyaWFibGVzLFxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZTtcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cbn1cbiIsIjxuZy1jb250YWluZXIgKm5nSWY9XCJpbnN0YW5jZVwiPlxuICA8ZGl2ICpuZ0lmPVwiaW5zdGFuY2UuZmlsdGVyIGFzIGZpbHRlclwiIGNsYXNzPVwiYWpmLWZpbHRlci1jb250YWluZXJcIj5cbiAgICA8YWpmLWZvcm1cbiAgICAgIFtmb3JtXT1cImZpbHRlci5mb3JtXCJcbiAgICAgIFtoYXNTdGFydE1lc3NhZ2VdPVwiZmFsc2VcIlxuICAgICAgW2hhc0VuZE1lc3NhZ2VdPVwiZmFsc2VcIlxuICAgICAgW2hpZGVUb3BUb29sYmFyXT1cInRydWVcIlxuICAgICAgW2hpZGVCb3R0b21Ub29sYmFyXT1cInRydWVcIlxuICAgICAgW2hpZGVOYXZpZ2F0aW9uQnV0dG9uc109XCJ0cnVlXCJcbiAgICA+PC9hamYtZm9ybT5cbiAgPC9kaXY+XG48L25nLWNvbnRhaW5lcj5cbiJdfQ==