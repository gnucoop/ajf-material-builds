/**
 * @license
 * Copyright (C) Gnucoop soc. coop.
 *
 * This file is part of the Advanced JSON forms (ajf).
 *
 * Advanced JSON forms (ajf) is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * Advanced JSON forms (ajf) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Advanced JSON forms (ajf).
 * If not, see http://www.gnu.org/licenses/.
 *
 */
import { AjfWidgetType } from '@ajf/core/reports';
export function ajfReportBuilderWidgetToString(widgetType) {
    return "reportbuilder-" + widgetType.toLowerCase();
}
export function ajfWidgetTypeStringToIcon(widgetType) {
    return "widget-" + widgetType.toLowerCase();
}
export function ajfWidgetTypeToIcon(widgetType) {
    return ajfWidgetTypeStringToIcon(AjfWidgetType[widgetType]);
}
export function ajfWidgetTypeStringToLabel(widgetType) {
    return "widgetType." + widgetType;
}
export function ajfWidgetTypeToLabel(type) {
    return ajfWidgetTypeStringToLabel(AjfWidgetType[type]);
}
export function widgetReportBuilderIconName(type) {
    return "reportbuilder-" + AjfWidgetType[type].toLowerCase();
}
export function sanitizeConditionString(str) {
    str = str.trim();
    while (str.indexOf('  ') > 0) {
        str = str.replace('  ', ' ');
    }
    return str;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvbWF0ZXJpYWwvcmVwb3J0LWJ1aWxkZXIvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0JHO0FBRUgsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBRWhELE1BQU0sVUFBVSw4QkFBOEIsQ0FBQyxVQUFrQjtJQUMvRCxPQUFPLG1CQUFpQixVQUFVLENBQUMsV0FBVyxFQUFJLENBQUM7QUFDckQsQ0FBQztBQUVELE1BQU0sVUFBVSx5QkFBeUIsQ0FBQyxVQUFrQjtJQUMxRCxPQUFPLFlBQVUsVUFBVSxDQUFDLFdBQVcsRUFBSSxDQUFDO0FBQzlDLENBQUM7QUFFRCxNQUFNLFVBQVUsbUJBQW1CLENBQUMsVUFBeUI7SUFDM0QsT0FBTyx5QkFBeUIsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztBQUM5RCxDQUFDO0FBRUQsTUFBTSxVQUFVLDBCQUEwQixDQUFDLFVBQWtCO0lBQzNELE9BQU8sZ0JBQWMsVUFBWSxDQUFDO0FBQ3BDLENBQUM7QUFFRCxNQUFNLFVBQVUsb0JBQW9CLENBQUMsSUFBbUI7SUFDdEQsT0FBTywwQkFBMEIsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUN6RCxDQUFDO0FBRUQsTUFBTSxVQUFVLDJCQUEyQixDQUFDLElBQW1CO0lBQzdELE9BQU8sbUJBQWlCLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLEVBQUksQ0FBQztBQUM5RCxDQUFDO0FBRUQsTUFBTSxVQUFVLHVCQUF1QixDQUFDLEdBQVc7SUFDakQsR0FBRyxHQUFHLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNqQixPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQzVCLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztLQUM5QjtJQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoQykgR251Y29vcCBzb2MuIGNvb3AuXG4gKlxuICogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikuXG4gKlxuICogQWR2YW5jZWQgSlNPTiBmb3JtcyAoYWpmKSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhc1xuICogcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsXG4gKiBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIEFkdmFuY2VkIEpTT04gZm9ybXMgKGFqZikgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VIEFmZmVyb1xuICogR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBBZHZhbmNlZCBKU09OIGZvcm1zIChhamYpLlxuICogSWYgbm90LCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLy5cbiAqXG4gKi9cblxuaW1wb3J0IHtBamZXaWRnZXRUeXBlfSBmcm9tICdAYWpmL2NvcmUvcmVwb3J0cyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBhamZSZXBvcnRCdWlsZGVyV2lkZ2V0VG9TdHJpbmcod2lkZ2V0VHlwZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGByZXBvcnRidWlsZGVyLSR7d2lkZ2V0VHlwZS50b0xvd2VyQ2FzZSgpfWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhamZXaWRnZXRUeXBlU3RyaW5nVG9JY29uKHdpZGdldFR5cGU6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBgd2lkZ2V0LSR7d2lkZ2V0VHlwZS50b0xvd2VyQ2FzZSgpfWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhamZXaWRnZXRUeXBlVG9JY29uKHdpZGdldFR5cGU6IEFqZldpZGdldFR5cGUpOiBzdHJpbmcge1xuICByZXR1cm4gYWpmV2lkZ2V0VHlwZVN0cmluZ1RvSWNvbihBamZXaWRnZXRUeXBlW3dpZGdldFR5cGVdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFqZldpZGdldFR5cGVTdHJpbmdUb0xhYmVsKHdpZGdldFR5cGU6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBgd2lkZ2V0VHlwZS4ke3dpZGdldFR5cGV9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFqZldpZGdldFR5cGVUb0xhYmVsKHR5cGU6IEFqZldpZGdldFR5cGUpOiBzdHJpbmcge1xuICByZXR1cm4gYWpmV2lkZ2V0VHlwZVN0cmluZ1RvTGFiZWwoQWpmV2lkZ2V0VHlwZVt0eXBlXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3aWRnZXRSZXBvcnRCdWlsZGVySWNvbk5hbWUodHlwZTogQWpmV2lkZ2V0VHlwZSk6IHN0cmluZyB7XG4gIHJldHVybiBgcmVwb3J0YnVpbGRlci0ke0FqZldpZGdldFR5cGVbdHlwZV0udG9Mb3dlckNhc2UoKX1gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2FuaXRpemVDb25kaXRpb25TdHJpbmcoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICBzdHIgPSBzdHIudHJpbSgpO1xuICB3aGlsZSAoc3RyLmluZGV4T2YoJyAgJykgPiAwKSB7XG4gICAgc3RyID0gc3RyLnJlcGxhY2UoJyAgJywgJyAnKTtcbiAgfVxuICByZXR1cm4gc3RyO1xufVxuIl19